.TH "userspace-module/utils/tcfs_utils/tcfs_utils.c" 3 "Thu Feb 1 2024 17:25:40" "Version 0.3.2" "TCFS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
userspace-module/utils/tcfs_utils/tcfs_utils.c \- This file contains an assortment of functions used by \fBtcfs\&.c\fP\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'tcfs_utils\&.h'\fP
.br
\fC#include '\&.\&./crypt\-utils/crypt\-utils\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBget_user_name\fP (char *buf, size_t size)"
.br
.RI "Fetch the username of the current user\&. "
.ti -1c
.RI "int \fBis_encrypted\fP (const char *path)"
.br
.RI "Check if a file is encrypted by TCFS\&. "
.ti -1c
.RI "char * \fBprefix_path\fP (const char *path, const char *realpath)"
.br
.RI "Prefix the realpath to the fuse path\&. "
.ti -1c
.RI "int \fBread_file\fP (FILE *file)"
.br
.RI "Read a file, useful for debugging tmpfiles\&. "
.ti -1c
.RI "int \fBget_encrypted_key\fP (char *filepath, unsigned char *encrypted_key)"
.br
.RI "Get the xattr value describing the key of a file\&. "
.ti -1c
.RI "void \fBprint_aes_key\fP (unsigned char *key)"
.br
.RI "Print the value of an AES key\&. "
.ti -1c
.RI "char * \fBstring_to_hex\fP (const char *input)"
.br
.RI "Convert a string to its hexadecimal representation\&. "
.ti -1c
.RI "char * \fBhex_to_string\fP (const char *input)"
.br
.RI "Convert a hexadecimal string to its ASCII representation\&. "
.ti -1c
.RI "void \fBlogMessage\fP (const char *format,\&.\&.\&.)"
.br
.RI "Logs a formatted message to a file with timestamp\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file contains an assortment of functions used by \fBtcfs\&.c\fP\&. 


.PP
\fBSee also\fP
.RS 4
\fBtcfs\&.c\fP 
.RE
.PP

.PP
Definition in file \fBtcfs_utils\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "int get_encrypted_key (char * filepath, unsigned char * encrypted_key)"

.PP
Get the xattr value describing the key of a file\&. 
.PP
\fBDeprecated\fP
.RS 4
Currently has no use\&. Was once used for debugging\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIfilepath\fP The full path of the file\&. 
.br
\fIencrypted_key\fP The buffer to save the encrypted key to\&. 
.RE
.PP
\fBReturns\fP
.RS 4
1 if successful, 0 otherwise\&. An error might be printen by print_err() function, 
.RE
.PP
\fBSee also\fP
.RS 4
print_err 
.RE
.PP

.PP
Definition at line \fB123\fP of file \fBtcfs_utils\&.c\fP\&.
.PP
References \fBis_encrypted()\fP, and \fBlogMessage()\fP\&.
.SS "void get_user_name (char * buf, size_t size)"

.PP
Fetch the username of the current user\&. 
.PP
\fBParameters\fP
.RS 4
\fIbuf\fP The buffer where the username will be written\&. 
.br
\fIsize\fP The size of the buffer\&. 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP
\fBNote\fP
.RS 4
If an error occurs, it will be printed, and the buffer will not be modified\&. 
.RE
.PP

.PP
Definition at line \fB19\fP of file \fBtcfs_utils\&.c\fP\&.
.PP
Referenced by \fBtcfs_read()\fP\&.
.SS "char * hex_to_string (const char * input)"

.PP
Convert a hexadecimal string to its ASCII representation\&. 
.PP
\fBParameters\fP
.RS 4
\fIinput\fP The input hexadecimal string\&. 
.RE
.PP
\fBReturns\fP
.RS 4
char * The ASCII representation of the input hexadecimal string\&. 
.RE
.PP
\fBNote\fP
.RS 4
Remember to free the result after use\&. 
.RE
.PP

.PP
Definition at line \fB218\fP of file \fBtcfs_utils\&.c\fP\&.
.PP
References \fBlogMessage()\fP\&.
.PP
Referenced by \fBdecrypt_file_name_with_hex()\fP\&.
.SS "int is_encrypted (const char * path)"

.PP
Check if a file is encrypted by TCFS\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The full path of the file\&. 
.RE
.PP
\fBReturns\fP
.RS 4
1 if successful, 0 otherwise\&. An error might be printen by print_err() function, 
.RE
.PP
\fBSee also\fP
.RS 4
print_err 
.RE
.PP

.PP
Definition at line \fB35\fP of file \fBtcfs_utils\&.c\fP\&.
.PP
Referenced by \fBget_encrypted_key()\fP\&.
.SS "void logMessage (const char * format,  \&.\&.\&.)"

.PP
Logs a formatted message to a file with timestamp\&. This function logs a formatted message to a specified log file along with a timestamp\&. It accepts a variable number of parameters, similar to printf\&.
.PP
\fBParameters\fP
.RS 4
\fIformat\fP The format string for the log message\&. 
.br
\fI\&.\&.\&.\fP Additional parameters to be formatted into the log message\&. 
.RE
.PP

.PP
Definition at line \fB262\fP of file \fBtcfs_utils\&.c\fP\&.
.PP
References \fBDEBUG\fP, and \fBLOGFILE\fP\&.
.PP
Referenced by \fBdecrypt_path()\fP, \fBdecrypt_path_and_filename()\fP, \fBdecrypt_string()\fP, \fBencrypt_path()\fP, \fBencrypt_path_and_filename()\fP, \fBgenerate_key()\fP, \fBget_encrypted_key()\fP, \fBhex_to_string()\fP, \fBmain()\fP, \fBprint_aes_key()\fP, \fBstring_to_hex()\fP, \fBtcfs_access()\fP, \fBtcfs_chmod()\fP, \fBtcfs_chown()\fP, \fBtcfs_create()\fP, \fBtcfs_fsync()\fP, \fBtcfs_getattr()\fP, \fBtcfs_getxattr()\fP, \fBtcfs_link()\fP, \fBtcfs_listxattr()\fP, \fBtcfs_mkdir()\fP, \fBtcfs_mknod()\fP, \fBtcfs_open()\fP, \fBtcfs_opendir()\fP, \fBtcfs_read()\fP, \fBtcfs_readdir()\fP, \fBtcfs_readlink()\fP, \fBtcfs_release()\fP, \fBtcfs_removexattr()\fP, \fBtcfs_rename()\fP, \fBtcfs_rmdir()\fP, \fBtcfs_setxattr()\fP, \fBtcfs_statfs()\fP, \fBtcfs_symlink()\fP, \fBtcfs_truncate()\fP, \fBtcfs_unlink()\fP, \fBtcfs_utimens()\fP, and \fBtcfs_write()\fP\&.
.SS "char * prefix_path (const char * path, const char * realpath)"

.PP
Prefix the realpath to the fuse path\&. 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP The fuse path\&. 
.br
\fIrealpath\fP The realpath to the directory mounted by TCFS\&. 
.RE
.PP
\fBReturns\fP
.RS 4
char * An allocated string containing the full path to the file\&. 
.RE
.PP
\fBNote\fP
.RS 4
Please free the result after use\&. 
.RE
.PP

.PP
Definition at line \fB53\fP of file \fBtcfs_utils\&.c\fP\&.
.PP
Referenced by \fBtcfs_access()\fP, \fBtcfs_chmod()\fP, \fBtcfs_chown()\fP, \fBtcfs_create()\fP, \fBtcfs_fsync()\fP, \fBtcfs_getattr()\fP, \fBtcfs_getxattr()\fP, \fBtcfs_link()\fP, \fBtcfs_listxattr()\fP, \fBtcfs_mkdir()\fP, \fBtcfs_mknod()\fP, \fBtcfs_open()\fP, \fBtcfs_opendir()\fP, \fBtcfs_read()\fP, \fBtcfs_readdir()\fP, \fBtcfs_readlink()\fP, \fBtcfs_release()\fP, \fBtcfs_removexattr()\fP, \fBtcfs_rename()\fP, \fBtcfs_rmdir()\fP, \fBtcfs_setxattr()\fP, \fBtcfs_statfs()\fP, \fBtcfs_symlink()\fP, \fBtcfs_truncate()\fP, \fBtcfs_unlink()\fP, \fBtcfs_utimens()\fP, and \fBtcfs_write()\fP\&.
.SS "void print_aes_key (unsigned char * key)"

.PP
Print the value of an AES key\&. 
.PP
\fBDeprecated\fP
.RS 4
Currently has no use\&. Printing the AES key is considered excessive\&. 
.RE
.PP
\fBWarning\fP
.RS 4
THIS WILL PRINT THE AES KEY TO STDOUT\&. TCFS trusts the user by design, but this is excessive\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP The string containing the key\&. 
.RE
.PP
\fBReturns\fP
.RS 4
void 
.RE
.PP

.PP
Definition at line \fB165\fP of file \fBtcfs_utils\&.c\fP\&.
.PP
References \fBlogMessage()\fP\&.
.PP
Referenced by \fBgenerate_key()\fP\&.
.SS "int read_file (FILE * file)"

.PP
Read a file, useful for debugging tmpfiles\&. 
.PP
\fBDeprecated\fP
.RS 4
Currently has no use\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIfile\fP The file to read\&. 
.RE
.PP
\fBReturns\fP
.RS 4
true 
.RE
.PP
\fBNote\fP
.RS 4
It will print 'file was empty' if the file was empty\&. 
.RE
.PP

.PP
Definition at line \fB95\fP of file \fBtcfs_utils\&.c\fP\&.
.SS "char * string_to_hex (const char * input)"

.PP
Convert a string to its hexadecimal representation\&. 
.PP
\fBParameters\fP
.RS 4
\fIinput\fP The input string\&. 
.RE
.PP
\fBReturns\fP
.RS 4
char * The hexadecimal representation of the input string\&. 
.RE
.PP
\fBNote\fP
.RS 4
Remember to free the result after use\&. 
.RE
.PP

.PP
Definition at line \fB182\fP of file \fBtcfs_utils\&.c\fP\&.
.PP
References \fBlogMessage()\fP\&.
.PP
Referenced by \fBencrypt_file_name_with_hex()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for TCFS from the source code\&.
