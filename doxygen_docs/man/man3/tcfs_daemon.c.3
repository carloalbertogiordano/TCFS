.TH "daemon/tcfs_daemon.c" 3 "Mon Nov 27 2023 17:03:19" "Version 0.2" "TCFS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
daemon/tcfs_daemon.c \- This is the core of the daemon\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'daemon_utils/daemon_tools/tcfs_daemon_tools\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBhandle_termination\fP (int signum)"
.br
.RI "Handle the termination if SIGTERM is received\&. "
.ti -1c
.RI "int \fBmain\fP ()"
.br
.RI "main function of the daemon\&. This will daemonize the program, spawn a thread to handle messages and handle unexpected termination of the thread "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "volatile int \fBterminate\fP = 0"
.br
.RI "If the spawned threads terminate abruptly they should set this to 1, so that the daemon can terminate\&. "
.ti -1c
.RI "pthread_mutex_t \fBterminate_mutex\fP = PTHREAD_MUTEX_INITIALIZER"
.br
.RI "Mutex needed to set the var terminate to 1 safely\&. "
.ti -1c
.RI "const char \fBMQUEUE\fP [] = '/tcfs_queue'"
.br
.RI "the queue file location "
.in -1c
.SH "Detailed Description"
.PP 
This is the core of the daemon\&. 


.PP
\fBNote\fP
.RS 4
Forking is disable at the moment, this meas it will run as a 'normal' program 
.PP
the main function spawns a thread to handle incoming messages on the queue 
.RE
.PP
\fBTodo\fP
.RS 4
: Enable forking 
.PP
Run the daemon via SystemD 
.RE
.PP

.PP
Definition in file \fBtcfs_daemon\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void handle_termination (int signum)"

.PP
Handle the termination if SIGTERM is received\&. 
.PP
\fBParameters\fP
.RS 4
\fIint\fP signum Integer corresponding to SIGNUM 
.RE
.PP
\fBTodo\fP
.RS 4
: Implement remove_queue() to clear and delete the queue 
.RE
.PP

.PP
Definition at line \fB36\fP of file \fBtcfs_daemon\&.c\fP\&.
.PP
References \fBprint_msg()\fP\&.
.PP
Referenced by \fBmain()\fP\&.
.SS "int main ()"

.PP
main function of the daemon\&. This will daemonize the program, spawn a thread to handle messages and handle unexpected termination of the thread 
.PP
\fBTodo\fP
.RS 4
: The brief description is basically false advertisement\&. It only spawn a thread and hangs infinitely 
.PP
: Remove the thread that spawns handle_outgoing_messages\&. This must not make it into final release 
.RE
.PP

.PP
Definition at line \fB47\fP of file \fBtcfs_daemon\&.c\fP\&.
.PP
References \fBhandle_termination()\fP, \fBMQUEUE\fP, \fBprint_err()\fP, \fBprint_msg()\fP, and \fBterminate\fP\&.
.SH "Variable Documentation"
.PP 
.SS "MQUEUE = '/tcfs_queue'"

.PP
the queue file location 
.PP
Definition at line \fB29\fP of file \fBtcfs_daemon\&.c\fP\&.
.PP
Referenced by \fBmain()\fP\&.
.SS "volatile int terminate = 0"

.PP
If the spawned threads terminate abruptly they should set this to 1, so that the daemon can terminate\&. 
.PP
\fBTodo\fP
.RS 4
: Implement logic to make this work 
.RE
.PP

.PP
Definition at line \fB17\fP of file \fBtcfs_daemon\&.c\fP\&.
.PP
Referenced by \fBmain()\fP\&.
.SS "pthread_mutex_t terminate_mutex = PTHREAD_MUTEX_INITIALIZER"

.PP
Mutex needed to set the var terminate to 1 safely\&. 
.PP
\fBTodo\fP
.RS 4
: implement logic to make this work 
.RE
.PP

.PP
Definition at line \fB23\fP of file \fBtcfs_daemon\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for TCFS from the source code\&.
