<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="crypt-utils_8c" kind="file" language="C++">
    <compoundname>crypt-utils.c</compoundname>
    <includes refid="crypt-utils_8h" local="yes">crypt-utils.h</includes>
    <incdepgraph>
      <node id="1">
        <label>userspace-module/utils/crypt-utils/crypt-utils.c</label>
        <link refid="crypt-utils_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>crypt-utils.h</label>
        <link refid="crypt-utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>../tcfs_utils/tcfs_utils.h</label>
        <link refid="tcfs__utils_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>errno.h</label>
      </node>
      <node id="8">
        <label>openssl/aes.h</label>
      </node>
      <node id="9">
        <label>openssl/bio.h</label>
      </node>
      <node id="10">
        <label>openssl/buffer.h</label>
      </node>
      <node id="11">
        <label>openssl/evp.h</label>
      </node>
      <node id="12">
        <label>openssl/rand.h</label>
      </node>
      <node id="15">
        <label>pwd.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>sys/mman.h</label>
      </node>
      <node id="16">
        <label>sys/xattr.h</label>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" prot="public" static="no">
        <name>BLOCKSIZE</name>
        <initializer>1024</initializer>
        <briefdescription>
<para>This defines the max size of a block that can be cyphered. This definition is marked as internal and should not be used directly by the user. </para>
        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="12" column="9" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84" prot="public" static="no">
        <name>IV_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
<para>The fixed size of the initialization vector <ref refid="" kindref="compound">IV </ref>. This definition is marked as internal and should not be used directly by the user. </para>
        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="19" column="9" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1" prot="public" static="no">
        <name>KEY_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
<para>The fixed size of the key. This definition is marked as internal and should not be used directly by the user. </para>
        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="25" column="9" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="25" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="crypt-utils_8c_1a94b5b388b3f00982ccee72b192077e76" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int do_crypt</definition>
        <argsstring>(FILE *in, FILE *out, int action, unsigned char *key_str)</argsstring>
        <name>do_crypt</name>
        <param>
          <type>FILE *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>action</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key_str</declname>
        </param>
        <briefdescription>
<para>High level function interface for performing AES encryption on FILE pointers Uses OpenSSL libcrypto EVP API <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>By Andy Sayler (www.andysayler.com) <linebreak/>
 Created 04/17/12 <linebreak/>
 </para>
</simplesect>
<simplesect kind="author"><para>Modified 18/10/23 by [Carlo Alberto Giordano] <linebreak/>
</para>
</simplesect>
Derived from OpenSSL.org EVP_Encrypt_* Manpage Examples <linebreak/>
 <ulink url="http://www.openssl.org/docs/crypto/EVP_EncryptInit.html#EXAMPLES">http://www.openssl.org/docs/crypto/EVP_EncryptInit.html#EXAMPLES</ulink> <linebreak/>
 With additional information from Saju Pillai&apos;s OpenSSL AES Example <linebreak/>
 <ulink url="http://saju.net.in/blog/?p=36">http://saju.net.in/blog/?p=36</ulink> <linebreak/>
 <ulink url="http://saju.net.in/code/misc/openssl_aes.c.txt">http://saju.net.in/code/misc/openssl_aes.c.txt</ulink> <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>The input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines if the action to do on the input file should be of encryption or decryption. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="crypt-utils_8h_1a1cb0c60ca582db30ae87362ca43e8c19" kindref="member">ENCRYPT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="crypt-utils_8h_1a36fab47015485191712a579a059a7c20" kindref="member">DECRYPT</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The key that must be AES 256 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. An error might be printen by print_err() function, </para>
</simplesect>
<simplesect kind="see"><para>print_err </para>
</simplesect>
<simplesect kind="note"><para>This function cyphers using AES 256 CBC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="54" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="54" bodyend="157" declfile="userspace-module/utils/crypt-utils/crypt-utils.c" declline="54" declcolumn="1"/>
        <references refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" compoundref="crypt-utils_8c" startline="12">BLOCKSIZE</references>
        <references refid="crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84" compoundref="crypt-utils_8c" startline="19">IV_SIZE</references>
        <references refid="crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1" compoundref="crypt-utils_8c" startline="25">KEY_SIZE</references>
        <referencedby refid="tcfs_8c_1a745384a010e20b082db26e16702a0129" compoundref="tcfs_8c" startline="357" endline="436">tcfs_read</referencedby>
        <referencedby refid="tcfs_8c_1adaba2baa5a036b8f77ec187599498a66" compoundref="tcfs_8c" startline="439" endline="522">tcfs_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int check_entropy</definition>
        <argsstring>(void)</argsstring>
        <name>check_entropy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify if there is enough entropy in the system to generate a key. </para>
        </briefdescription>
        <detaileddescription>
<internal><para>This function is marked as internal and should not be used by the user <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A value greater than 0 corresponding to the entropy level, if an error occurs -1 is returned </para>
</simplesect>
<simplesect kind="note"><para>This function evaluates the entropy by checking the /proc/sys/kernel/random/entropy_avail file. </para>
</simplesect>
<simplesect kind="see"><para>man page 4 for random </para>
</simplesect>
</para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="169" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="169" bodyend="188"/>
        <referencedby refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" compoundref="crypt-utils_8c" startline="232" endline="263">generate_key</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_entropy</definition>
        <argsstring>(void)</argsstring>
        <name>add_entropy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Force new entropy in /dev/urandom, This function is marked as internal and should not be used by the user. </para>
        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
<simplesect kind="note"><para>Very dangerous, if this fails an error will be printed and the program will exit with EXIT_FAILURE </para>
</simplesect>
</para>
</internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="199" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="199" bodyend="223"/>
        <referencedby refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" compoundref="crypt-utils_8c" startline="232" endline="263">generate_key</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void generate_key</definition>
        <argsstring>(unsigned char *destination)</argsstring>
        <name>generate_key</name>
        <param>
          <type>unsigned char *</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Generate a new AES 256 key for a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the string in which the generated key will be saved. If an error occurs it will be set to NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="232" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="232" bodyend="263"/>
        <references refid="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" compoundref="crypt-utils_8c" startline="199" endline="223">add_entropy</references>
        <references refid="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" compoundref="crypt-utils_8c" startline="169" endline="188">check_entropy</references>
        <references refid="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" compoundref="crypt-utils_8c" startline="360" endline="367">is_valid_key</references>
        <references refid="tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52" compoundref="tcfs__utils_8c" startline="170" endline="178">print_aes_key</references>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="553" endline="617">tcfs_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char * encrypt_string</definition>
        <argsstring>(unsigned char *plaintext, const char *key, int *encrypted_key_len)</argsstring>
        <name>encrypt_string</name>
        <param>
          <type>unsigned char *</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>encrypted_key_len</declname>
        </param>
        <briefdescription>
<para>Encrypt the *plaintext string using a AES 256 key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the string to encrypt </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES 256 KEY </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypted_len</parametername>
</parameternamelist>
<parameterdescription>
<para>This will be set to the encrypted string length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned char * The encrypted string will be allocated and then returned </para>
</simplesect>
<simplesect kind="note"><para>After the use remember to free the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="275" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="275" bodyend="314"/>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="553" endline="617">tcfs_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char * decrypt_string</definition>
        <argsstring>(unsigned char *ciphertext, const char *key)</argsstring>
        <name>decrypt_string</name>
        <param>
          <type>unsigned char *</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Decrypt the *ciphertext string using a AES 256 key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the string to decrypt </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES 256 KEY </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned char * The plaintext string will be allocated and then returned </para>
</simplesect>
<simplesect kind="note"><para>After the use remember to free the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="325" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="325" bodyend="351"/>
        <referencedby refid="tcfs_8c_1a745384a010e20b082db26e16702a0129" compoundref="tcfs_8c" startline="357" endline="436">tcfs_read</referencedby>
        <referencedby refid="tcfs_8c_1adaba2baa5a036b8f77ec187599498a66" compoundref="tcfs_8c" startline="439" endline="522">tcfs_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_valid_key</definition>
        <argsstring>(const unsigned char *key)</argsstring>
        <name>is_valid_key</name>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Check if a given key is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. An error might be printen by print_err() function, </para>
</simplesect>
<simplesect kind="see"><para>print_err </para>
</simplesect>
<simplesect kind="note"><para>This function only checks for key length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="360" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="360" bodyend="367"/>
        <referencedby refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" compoundref="crypt-utils_8c" startline="232" endline="263">generate_key</referencedby>
        <referencedby refid="tcfs_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="tcfs_8c" startline="768" endline="824">main</referencedby>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="553" endline="617">tcfs_create</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypt-utils_8h" kindref="compound">crypt-utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLOCKSIZE<sp/>1024</highlight></codeline>
<codeline lineno="19" refid="crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IV_SIZE<sp/>32</highlight></codeline>
<codeline lineno="25" refid="crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEY_SIZE<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="crypt-utils_8c_1a94b5b388b3f00982ccee72b192077e76" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a94b5b388b3f00982ccee72b192077e76" kindref="member">do_crypt</ref><sp/>(FILE<sp/>*in,<sp/>FILE<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_str)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Local<sp/>Vars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inbuf[<ref refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" kindref="member">BLOCKSIZE</ref>];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inlen;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allow<sp/>enough<sp/>space<sp/>in<sp/>output<sp/>buffer<sp/>for<sp/>additional<sp/>cipher<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outbuf[<ref refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" kindref="member">BLOCKSIZE</ref><sp/>+<sp/>EVP_MAX_BLOCK_LENGTH];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outlen;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>writelen;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>OpenSSL<sp/>libcrypto<sp/>vars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX<sp/>*ctx;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>ctx<sp/>=<sp/>EVP_CIPHER_CTX_new<sp/>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[<ref refid="crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1" kindref="member">KEY_SIZE</ref>];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[<ref refid="crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84" kindref="member">IV_SIZE</ref>];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrounds<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>tmp<sp/>vars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setup<sp/>Encryption<sp/>Key<sp/>and<sp/>Cipher<sp/>Engine<sp/>if<sp/>in<sp/>cipher<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!key_str)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Key_str<sp/>must<sp/>not<sp/>be<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>Key<sp/>from<sp/>String<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>EVP_BytesToKey<sp/>(EVP_aes_256_cbc<sp/>(),<sp/>EVP_sha1<sp/>(),<sp/>NULL,<sp/>key_str,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key_str),<sp/>nrounds,<sp/>key,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iv);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>32)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Key<sp/>size<sp/>is<sp/>%d<sp/>bits<sp/>-<sp/>should<sp/>be<sp/>256<sp/>bits\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Init<sp/>Engine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_init<sp/>(ctx);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CipherInit_ex<sp/>(ctx,<sp/>EVP_aes_256_cbc<sp/>(),<sp/>NULL,<sp/>key,<sp/>iv,<sp/>action);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>through<sp/>Input<sp/>File*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>Block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inlen<sp/>=<sp/>fread<sp/>(inbuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(*inbuf),<sp/><ref refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" kindref="member">BLOCKSIZE</ref>,<sp/>in);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlen<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>EOF<sp/>-&gt;<sp/>Break<sp/>Loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>in<sp/>cipher<sp/>mode,<sp/>perform<sp/>cipher<sp/>transform<sp/>on<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EVP_CipherUpdate<sp/>(ctx,<sp/>outbuf,<sp/>&amp;outlen,<sp/>inbuf,<sp/>inlen))</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_cleanup<sp/>(ctx);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>in<sp/>pass-through<sp/>mode.<sp/>copy<sp/>block<sp/>as<sp/>is<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy<sp/>(outbuf,<sp/>inbuf,<sp/>inlen);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlen<sp/>=<sp/>inlen;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>Block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writelen<sp/>=<sp/>fwrite<sp/>(outbuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(*outbuf),<sp/>outlen,<sp/>out);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writelen<sp/>!=<sp/>outlen)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;fwrite<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_cleanup<sp/>(ctx);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>in<sp/>cipher<sp/>mode,<sp/>handle<sp/>necessary<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>remaining<sp/>cipher<sp/>block<sp/>+<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EVP_CipherFinal_ex<sp/>(ctx,<sp/>outbuf,<sp/>&amp;outlen))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_cleanup<sp/>(ctx);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>remainign<sp/>cipher<sp/>block<sp/>+<sp/>padding*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite<sp/>(outbuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(*inbuf),<sp/>outlen,<sp/>out);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_cleanup<sp/>(ctx);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" kindref="member">check_entropy</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>FILE<sp/>*entropy_file<sp/>=<sp/>fopen<sp/>(</highlight><highlight class="stringliteral">&quot;/proc/sys/kernel/random/entropy_avail&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy_file<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>open<sp/>entropy<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entropy_value;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf<sp/>(entropy_file,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;entropy_value)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>estimate<sp/>entropy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose<sp/>(entropy_file);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>fclose<sp/>(entropy_file);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entropy_value;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" kindref="member">add_entropy</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>FILE<sp/>*urandom<sp/>=<sp/>fopen<sp/>(</highlight><highlight class="stringliteral">&quot;/dev/urandom&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(urandom<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>open<sp/>/dev/urandom&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>random_data[32];</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/>fread<sp/>(random_data,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(random_data),<sp/>urandom);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>fclose<sp/>(urandom);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(random_data))</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>read<sp/>data\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Usa<sp/>i<sp/>dati<sp/>casuali<sp/>per<sp/>aggiungere<sp/>entropia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>RAND_add<sp/>(random_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(random_data),</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5);<sp/></highlight><highlight class="comment">//<sp/>0.5<sp/>è<sp/>un<sp/>peso<sp/>arbitrario</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>fprintf<sp/>(stdout,<sp/></highlight><highlight class="stringliteral">&quot;Entropy<sp/>added<sp/>successfully!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" kindref="member">generate_key</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*destination)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>fprintf<sp/>(stdout,<sp/></highlight><highlight class="stringliteral">&quot;Generating<sp/>a<sp/>new<sp/>key...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Why?<sp/>Because<sp/>if<sp/>we<sp/>try<sp/>to<sp/>create<sp/>a<sp/>large<sp/>number<sp/>of<sp/>files<sp/>there<sp/>might<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>enough<sp/>random<sp/>bytes<sp/>in<sp/>the<sp/>system<sp/>to<sp/>generate<sp/>a<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entropy<sp/>=<sp/><ref refid="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" kindref="member">check_entropy</ref><sp/>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy<sp/>&lt;<sp/>128)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;WARN:<sp/>not<sp/>enough<sp/>entropy,<sp/>creating<sp/>some...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" kindref="member">add_entropy</ref><sp/>();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RAND_bytes<sp/>(destination,<sp/>32)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>generate<sp/>key\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destination<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)destination)<sp/>==<sp/>32)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" kindref="member">is_valid_key</ref><sp/>(destination)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Err:<sp/>Generated<sp/>key<sp/>is<sp/>inval1d\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52" kindref="member">print_aes_key</ref><sp/>(destination);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>destination<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="275" refid="crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6" kindref="member">encrypt_string</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*plaintext,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*encrypted_key_len)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX<sp/>*ctx;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_CIPHER<sp/>*cipher<sp/>=<sp/>EVP_aes_256_cbc<sp/>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[AES_BLOCK_SIZE];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>memset<sp/>(iv,<sp/>0,<sp/>AES_BLOCK_SIZE);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>ctx<sp/>=<sp/>EVP_CIPHER_CTX_new<sp/>();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctx)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>EVP_EncryptInit_ex<sp/>(ctx,<sp/>cipher,<sp/>NULL,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key,<sp/>iv);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>plaintext_len<sp/>=<sp/>strlen<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)plaintext);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ciphertext[plaintext_len<sp/>+<sp/>AES_BLOCK_SIZE];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>memset<sp/>(ciphertext,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(ciphertext));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>EVP_EncryptUpdate<sp/>(ctx,<sp/>ciphertext,<sp/>&amp;len,<sp/>plaintext,<sp/>plaintext_len);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>EVP_EncryptFinal_ex<sp/>(ctx,<sp/>ciphertext<sp/>+<sp/>len,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX_free<sp/>(ctx);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoded_string<sp/>=<sp/>malloc<sp/>(len<sp/>*<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!encoded_string)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;encoded_string[i<sp/>*<sp/>2],<sp/></highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,<sp/>ciphertext[i]);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>encoded_string[len<sp/>*<sp/>2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>*encrypted_key_len<sp/>=<sp/>len<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encoded_string;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="325" refid="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" kindref="member">decrypt_string</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ciphertext,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX<sp/>*ctx;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_CIPHER<sp/>*cipher</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>EVP_aes_256_cbc<sp/>();<sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>the<sp/>correct<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[AES_BLOCK_SIZE];</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>memset<sp/>(iv,<sp/>0,<sp/>AES_BLOCK_SIZE);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>ctx<sp/>=<sp/>EVP_CIPHER_CTX_new<sp/>();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>EVP_DecryptInit_ex<sp/>(ctx,<sp/>cipher,<sp/>NULL,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key,<sp/>iv);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>decoded_len<sp/>=<sp/>strlen<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ciphertext);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>plaintext[decoded_len];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>memset<sp/>(plaintext,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(plaintext));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>EVP_DecryptUpdate<sp/>(ctx,<sp/>plaintext,<sp/>&amp;len,<sp/>ciphertext,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)decoded_len);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>EVP_DecryptFinal_ex<sp/>(ctx,<sp/>plaintext<sp/>+<sp/>len,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX_free<sp/>(ctx);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decrypted_string<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc<sp/>(decoded_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>memcpy<sp/>(decrypted_string,<sp/>plaintext,<sp/>decoded_len);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>decrypted_string[decoded_len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decrypted_string;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" kindref="member">is_valid_key</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[33];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>memcpy<sp/>(str,<sp/>key,<sp/>32);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>str[32]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_length<sp/>=<sp/>strlen<sp/>(str);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_length<sp/>!=<sp/>32<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="370"><highlight class="comment">int<sp/>rebuild_key(char<sp/>*key,<sp/>char<sp/>*cert,<sp/>char<sp/>*dest){</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline lineno="372"><highlight class="comment">}*/</highlight></codeline>
    </programlisting>
    <location file="userspace-module/utils/crypt-utils/crypt-utils.c"/>
  </compounddef>
</doxygen>
