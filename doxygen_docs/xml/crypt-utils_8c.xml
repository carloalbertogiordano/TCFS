<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="crypt-utils_8c" kind="file" language="C++">
    <compoundname>crypt-utils.c</compoundname>
    <includes refid="crypt-utils_8h" local="yes">crypt-utils.h</includes>
    <incdepgraph>
      <node id="1">
        <label>userspace-module/utils/crypt-utils/crypt-utils.c</label>
        <link refid="crypt-utils_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>crypt-utils.h</label>
        <link refid="crypt-utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>../tcfs_utils/tcfs_utils.h</label>
        <link refid="tcfs__utils_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ctype.h</label>
      </node>
      <node id="16">
        <label>errno.h</label>
      </node>
      <node id="4">
        <label>libgen.h</label>
      </node>
      <node id="10">
        <label>openssl/aes.h</label>
      </node>
      <node id="11">
        <label>openssl/bio.h</label>
      </node>
      <node id="12">
        <label>openssl/buffer.h</label>
      </node>
      <node id="13">
        <label>openssl/evp.h</label>
      </node>
      <node id="14">
        <label>openssl/rand.h</label>
      </node>
      <node id="17">
        <label>pwd.h</label>
      </node>
      <node id="19">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>sys/mman.h</label>
      </node>
      <node id="18">
        <label>sys/xattr.h</label>
      </node>
      <node id="9">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" prot="public" static="no">
        <name>BLOCKSIZE</name>
        <initializer>1024</initializer>
        <briefdescription>
<para>This defines the max size of a block that can be cyphered. This definition is marked as internal and should not be used directly by the user. </para>
        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="21" column="9" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84" prot="public" static="no">
        <name>IV_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
<para>The fixed size of the initialization vector <ref refid="" kindref="compound">IV </ref>. This definition is marked as internal and should not be used directly by the user. </para>
        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="28" column="9" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1" prot="public" static="no">
        <name>KEY_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
<para>The fixed size of the key. This definition is marked as internal and should not be used directly by the user. </para>
        </briefdescription>
        <detaileddescription>
<internal></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="34" column="9" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="crypt-utils_8c_1a94b5b388b3f00982ccee72b192077e76" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int do_crypt</definition>
        <argsstring>(FILE *in, FILE *out, int action, unsigned char *key_str)</argsstring>
        <name>do_crypt</name>
        <param>
          <type>FILE *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>action</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key_str</declname>
        </param>
        <briefdescription>
<para>High level function interface for performing AES encryption on FILE pointers Uses OpenSSL libcrypto EVP API <linebreak/>
. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>By Andy Sayler (www.andysayler.com) <linebreak/>
 Created 04/17/12 <linebreak/>
 </para>
</simplesect>
<simplesect kind="author"><para>Modified 18/10/23 by [Carlo Alberto Giordano] <linebreak/>
</para>
</simplesect>
Derived from OpenSSL.org EVP_Encrypt_* Manpage Examples <linebreak/>
 <ulink url="http://www.openssl.org/docs/crypto/EVP_EncryptInit.html#EXAMPLES">http://www.openssl.org/docs/crypto/EVP_EncryptInit.html#EXAMPLES</ulink> <linebreak/>
 With additional information from Saju Pillai&apos;s OpenSSL AES Example <linebreak/>
 <ulink url="http://saju.net.in/blog/?p=36">http://saju.net.in/blog/?p=36</ulink> <linebreak/>
 <ulink url="http://saju.net.in/code/misc/openssl_aes.c.txt">http://saju.net.in/code/misc/openssl_aes.c.txt</ulink> <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>The input file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines if the action to do on the input file should be of encryption or decryption. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="crypt-utils_8h_1a1cb0c60ca582db30ae87362ca43e8c19" kindref="member">ENCRYPT</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="crypt-utils_8h_1a36fab47015485191712a579a059a7c20" kindref="member">DECRYPT</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The key that must be AES 256 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. An error might be printen by print_err() function, </para>
</simplesect>
<simplesect kind="see"><para>print_err </para>
</simplesect>
<simplesect kind="note"><para>This function cyphers using AES 256 CBC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="63" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="63" bodyend="164" declfile="userspace-module/utils/crypt-utils/crypt-utils.c" declline="63" declcolumn="1"/>
        <references refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" compoundref="crypt-utils_8c" startline="21">BLOCKSIZE</references>
        <references refid="crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84" compoundref="crypt-utils_8c" startline="28">IV_SIZE</references>
        <references refid="crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1" compoundref="crypt-utils_8c" startline="34">KEY_SIZE</references>
        <referencedby refid="tcfs_8c_1a745384a010e20b082db26e16702a0129" compoundref="tcfs_8c" startline="734" endline="815">tcfs_read</referencedby>
        <referencedby refid="tcfs_8c_1adaba2baa5a036b8f77ec187599498a66" compoundref="tcfs_8c" startline="830" endline="915">tcfs_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int check_entropy</definition>
        <argsstring>(void)</argsstring>
        <name>check_entropy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Verify if there is enough entropy in the system to generate a key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A value greater than 0 corresponding to the entropy level, if an error occurs false is returned </para>
</simplesect>
<simplesect kind="note"><para>This function evaluates the entropy by checking the /proc/sys/kernel/random/entropy_avail file. </para>
</simplesect>
<simplesect kind="see"><para>man page 4 for random </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="174" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="174" bodyend="193"/>
        <referencedby refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" compoundref="crypt-utils_8c" startline="235" endline="266">generate_key</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_entropy</definition>
        <argsstring>(void)</argsstring>
        <name>add_entropy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Force new entropy in /dev/urandom. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>void </para>
</simplesect>
<simplesect kind="note"><para>Very dangerous, if this fails an error will be printed and the program will exit with EXIT_FAILURE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="202" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="202" bodyend="226"/>
        <referencedby refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" compoundref="crypt-utils_8c" startline="235" endline="266">generate_key</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void generate_key</definition>
        <argsstring>(unsigned char *destination)</argsstring>
        <name>generate_key</name>
        <param>
          <type>unsigned char *</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Generate a new AES 256 key for a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the string in which the generated key will be saved. If an error occurs it will be set to NULL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="235" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="235" bodyend="266"/>
        <references refid="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" compoundref="crypt-utils_8c" startline="202" endline="226">add_entropy</references>
        <references refid="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" compoundref="crypt-utils_8c" startline="174" endline="193">check_entropy</references>
        <references refid="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" compoundref="crypt-utils_8c" startline="388" endline="395">is_valid_key</references>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
        <references refid="tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52" compoundref="tcfs__utils_8c" startline="165" endline="173">print_aes_key</references>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="1031" endline="1099">tcfs_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char * encrypt_string</definition>
        <argsstring>(unsigned char *plaintext, const char *key, int *encrypted_key_len)</argsstring>
        <name>encrypt_string</name>
        <param>
          <type>unsigned char *</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>encrypted_key_len</declname>
        </param>
        <briefdescription>
<para>Encrypt the *plaintext string using a AES 256 key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the string to encrypt </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES 256 KEY </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypted_len</parametername>
</parameternamelist>
<parameterdescription>
<para>This will be set to the encrypted string length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned char * The encrypted string will be allocated and then returned </para>
</simplesect>
<simplesect kind="note"><para>After the use remember to free the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="278" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="278" bodyend="319"/>
        <referencedby refid="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" compoundref="crypt-utils_8c" startline="398" endline="403">encrypt_file_name_with_hex</referencedby>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="1031" endline="1099">tcfs_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>unsigned char * decrypt_string</definition>
        <argsstring>(unsigned char *ciphertext, const char *key)</argsstring>
        <name>decrypt_string</name>
        <param>
          <type>unsigned char *</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Decrypt the *ciphertext string using a AES 256 key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the string to decrypt in HEX format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES 256 KEY </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned char * The plaintext string will be allocated and then returned </para>
</simplesect>
<simplesect kind="note"><para>After the use remember to free the result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="330" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="330" bodyend="379"/>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
        <referencedby refid="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" compoundref="crypt-utils_8c" startline="406" endline="410">decrypt_file_name_with_hex</referencedby>
        <referencedby refid="tcfs_8c_1a745384a010e20b082db26e16702a0129" compoundref="tcfs_8c" startline="734" endline="815">tcfs_read</referencedby>
        <referencedby refid="tcfs_8c_1adaba2baa5a036b8f77ec187599498a66" compoundref="tcfs_8c" startline="830" endline="915">tcfs_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_valid_key</definition>
        <argsstring>(const unsigned char *key)</argsstring>
        <name>is_valid_key</name>
        <param>
          <type>const unsigned char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Check if a given key is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. An error might be printen by print_err() function, </para>
</simplesect>
<simplesect kind="see"><para>print_err </para>
</simplesect>
<simplesect kind="note"><para>This function only checks for key length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="388" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="388" bodyend="395"/>
        <referencedby refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" compoundref="crypt-utils_8c" startline="235" endline="266">generate_key</referencedby>
        <referencedby refid="tcfs_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="tcfs_8c" startline="1412" endline="1461">main</referencedby>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="1031" endline="1099">tcfs_create</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * encrypt_file_name_with_hex</definition>
        <argsstring>(const char *file, const char *key)</argsstring>
        <name>encrypt_file_name_with_hex</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="398" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="398" bodyend="403"/>
        <references refid="crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6" compoundref="crypt-utils_8c" startline="278" endline="319">encrypt_string</references>
        <references refid="tcfs__utils_8c_1a819d57d5c053a25772508a943d1bcc48" compoundref="tcfs__utils_8c" startline="182" endline="209">string_to_hex</references>
        <referencedby refid="crypt-utils_8c_1ad9b10366ade9f2129ec2613fdc76df80" compoundref="crypt-utils_8c" startline="420" endline="521">encrypt_path</referencedby>
        <referencedby refid="crypt-utils_8c_1a5c45db4d3db3ef274fb6356e1a95e644" compoundref="crypt-utils_8c" startline="532" endline="635">encrypt_path_and_filename</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * decrypt_file_name_with_hex</definition>
        <argsstring>(const char *enc_file, const char *key)</argsstring>
        <name>decrypt_file_name_with_hex</name>
        <param>
          <type>const char *</type>
          <declname>enc_file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="406" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="406" bodyend="410"/>
        <references refid="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" compoundref="crypt-utils_8c" startline="330" endline="379">decrypt_string</references>
        <references refid="tcfs__utils_8c_1a6de1cb8448198da94080ad32d7e4eabf" compoundref="tcfs__utils_8c" startline="218" endline="251">hex_to_string</references>
        <referencedby refid="crypt-utils_8c_1a1899c23a523d11ed1cb5601eabdb023d" compoundref="crypt-utils_8c" startline="645" endline="747">decrypt_path</referencedby>
        <referencedby refid="crypt-utils_8c_1a373f8aedbcd8b6ce22fe7bdfeb2961c2" compoundref="crypt-utils_8c" startline="759" endline="862">decrypt_path_and_filename</referencedby>
        <referencedby refid="tcfs_8c_1a1a713549c892f56a6522e6487c581d69" compoundref="tcfs_8c" startline="196" endline="273">tcfs_readdir</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1ad9b10366ade9f2129ec2613fdc76df80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * encrypt_path</definition>
        <argsstring>(const char *path, const char *key)</argsstring>
        <name>encrypt_path</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Encrypts each part of the given path using a specified key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The input path to be encrypted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The encryption key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A dynamically allocated string containing the encrypted path. It is the responsibility of the caller to free this memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="420" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="420" bodyend="521"/>
        <references refid="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" compoundref="crypt-utils_8c" startline="398" endline="403">encrypt_file_name_with_hex</references>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
        <referencedby refid="tcfs_8c_1a76af7857833338c73b9cafdce59ca01d" compoundref="tcfs_8c" startline="132" endline="149">tcfs_access</referencedby>
        <referencedby refid="tcfs_8c_1a3cb10be0f6147667dc0e757636e9892f" compoundref="tcfs_8c" startline="497" endline="516">tcfs_chmod</referencedby>
        <referencedby refid="tcfs_8c_1afff31b61fa0723502cf85922816f14f9" compoundref="tcfs_8c" startline="530" endline="546">tcfs_chown</referencedby>
        <referencedby refid="tcfs_8c_1a411eac4511d0eae4ce78a2fd3d22ac8c" compoundref="tcfs_8c" startline="99" endline="120">tcfs_getattr</referencedby>
        <referencedby refid="tcfs_8c_1a682b553345b6d872453d1ace7339bb9e" compoundref="tcfs_8c" startline="324" endline="340">tcfs_mkdir</referencedby>
        <referencedby refid="tcfs_8c_1a151f53359474a95c52f5e79d438869bd" compoundref="tcfs_8c" startline="286" endline="312">tcfs_mknod</referencedby>
        <referencedby refid="tcfs_8c_1af0c6a7d66189cc1e9fbfafba5255e60d" compoundref="tcfs_8c" startline="651" endline="670">tcfs_open</referencedby>
        <referencedby refid="tcfs_8c_1a92ebab5be45b159c2850a47a5072b58d" compoundref="tcfs_8c" startline="67" endline="86">tcfs_opendir</referencedby>
        <referencedby refid="tcfs_8c_1a745384a010e20b082db26e16702a0129" compoundref="tcfs_8c" startline="734" endline="815">tcfs_read</referencedby>
        <referencedby refid="tcfs_8c_1a1a713549c892f56a6522e6487c581d69" compoundref="tcfs_8c" startline="196" endline="273">tcfs_readdir</referencedby>
        <referencedby refid="tcfs_8c_1acb1e081efcbf61b6f34e8bbdf7af8979" compoundref="tcfs_8c" startline="162" endline="180">tcfs_readlink</referencedby>
        <referencedby refid="tcfs_8c_1a2853593dded66a922afbdc36afb15a50" compoundref="tcfs_8c" startline="377" endline="392">tcfs_rmdir</referencedby>
        <referencedby refid="tcfs_8c_1ad3c328fdcd93c8203e1ce9c785fd3a14" compoundref="tcfs_8c" startline="979" endline="992">tcfs_setxattr</referencedby>
        <referencedby refid="tcfs_8c_1a7e7f7a65b4e76cc96505d0c6d62fba9c" compoundref="tcfs_8c" startline="559" endline="577">tcfs_truncate</referencedby>
        <referencedby refid="tcfs_8c_1ac6d3a8a626363a6f98de64e585968b09" compoundref="tcfs_8c" startline="351" endline="366">tcfs_unlink</referencedby>
        <referencedby refid="tcfs_8c_1aca5dccf989dfc270ca31e1d8b20bb60e" compoundref="tcfs_8c" startline="612" endline="638">tcfs_utimens</referencedby>
        <referencedby refid="tcfs_8c_1adaba2baa5a036b8f77ec187599498a66" compoundref="tcfs_8c" startline="830" endline="915">tcfs_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a5c45db4d3db3ef274fb6356e1a95e644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * encrypt_path_and_filename</definition>
        <argsstring>(const char *path, const char *key)</argsstring>
        <name>encrypt_path_and_filename</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Encrypts the given filename with its path using a specified key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The input path to be encrypted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The encryption key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A dynamically allocated string containing the encrypted path with the encrypted filename. It is the responsibility of the caller to free this memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="532" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="532" bodyend="635"/>
        <references refid="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" compoundref="crypt-utils_8c" startline="398" endline="403">encrypt_file_name_with_hex</references>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="1031" endline="1099">tcfs_create</referencedby>
        <referencedby refid="tcfs_8c_1a014853840814f4d5225e2e28e129f9e5" compoundref="tcfs_8c" startline="1140" endline="1161">tcfs_fsync</referencedby>
        <referencedby refid="tcfs_8c_1a6a031c4e3c6dd59051c09789c4666657" compoundref="tcfs_8c" startline="1199" endline="1215">tcfs_getxattr</referencedby>
        <referencedby refid="tcfs_8c_1a271df7bd878f5ed132e1f98487e8aebd" compoundref="tcfs_8c" startline="465" endline="484">tcfs_link</referencedby>
        <referencedby refid="tcfs_8c_1ae6edcf6a80467925a9a2112172395de1" compoundref="tcfs_8c" startline="1229" endline="1243">tcfs_listxattr</referencedby>
        <referencedby refid="tcfs_8c_1a1241e1fcfe6bb4a5d49d8c8d4e737bcd" compoundref="tcfs_8c" startline="1111" endline="1127">tcfs_release</referencedby>
        <referencedby refid="tcfs_8c_1acfe2c6a9467bd25a5ba6dc1a65209262" compoundref="tcfs_8c" startline="1273" endline="1287">tcfs_removexattr</referencedby>
        <referencedby refid="tcfs_8c_1aee96b732a1569a607e63bac6fbe5c403" compoundref="tcfs_8c" startline="436" endline="453">tcfs_rename</referencedby>
        <referencedby refid="tcfs_8c_1ac1d223f9b998d5af6bec3947d03be0fc" compoundref="tcfs_8c" startline="404" endline="423">tcfs_symlink</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a1899c23a523d11ed1cb5601eabdb023d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * decrypt_path</definition>
        <argsstring>(const char *encrypted_path, const char *key)</argsstring>
        <name>decrypt_path</name>
        <param>
          <type>const char *</type>
          <declname>encrypted_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Decrypts each part of the given encrypted path using a specified key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encrypted_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The input encrypted path to be decrypted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The decryption key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A dynamically allocated string containing the decrypted path. It is the responsibility of the caller to free this memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="645" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="645" bodyend="747"/>
        <references refid="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" compoundref="crypt-utils_8c" startline="406" endline="410">decrypt_file_name_with_hex</references>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
        <referencedby refid="tcfs_8c_1a1a713549c892f56a6522e6487c581d69" compoundref="tcfs_8c" startline="196" endline="273">tcfs_readdir</referencedby>
      </memberdef>
      <memberdef kind="function" id="crypt-utils_8c_1a373f8aedbcd8b6ce22fe7bdfeb2961c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * decrypt_path_and_filename</definition>
        <argsstring>(const char *encrypted_path, const char *key)</argsstring>
        <name>decrypt_path_and_filename</name>
        <param>
          <type>const char *</type>
          <declname>encrypted_path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Decrypts the given encrypted filename with its path using a specified key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encrypted_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The input encrypted path to be decrypted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The decryption key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A dynamically allocated string containing the decrypted path with the decrypted filename. It is the responsibility of the caller to free this memory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/crypt-utils/crypt-utils.c" line="759" column="1" bodyfile="userspace-module/utils/crypt-utils/crypt-utils.c" bodystart="759" bodyend="862"/>
        <references refid="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" compoundref="crypt-utils_8c" startline="406" endline="410">decrypt_file_name_with_hex</references>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Implementation file for cryptographic utility functions. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains the implementation of various cryptographic utility functions, including AES encryption and decryption, key generation, entropy checks, and path encryption/decryption.</para>
<para><simplesect kind="author"><para>By Carlo Alberto Giordnano <linebreak/>
Created 18/10/23 by [Carlo Alberto Giordano] <linebreak/>
</para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crypt-utils_8h" kindref="compound">crypt-utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLOCKSIZE<sp/>1024</highlight></codeline>
<codeline lineno="28" refid="crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IV_SIZE<sp/>32</highlight></codeline>
<codeline lineno="34" refid="crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEY_SIZE<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="crypt-utils_8c_1a94b5b388b3f00982ccee72b192077e76" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a94b5b388b3f00982ccee72b192077e76" kindref="member">do_crypt</ref><sp/>(FILE<sp/>*in,<sp/>FILE<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key_str)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Buffers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inbuf[<ref refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" kindref="member">BLOCKSIZE</ref>];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inlen;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allow<sp/>enough<sp/>space<sp/>in<sp/>output<sp/>buffer<sp/>for<sp/>additional<sp/>cipher<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outbuf[<ref refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" kindref="member">BLOCKSIZE</ref><sp/>+<sp/>EVP_MAX_BLOCK_LENGTH];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outlen;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>writelen;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>OpenSSL<sp/>libcrypto<sp/>vars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX<sp/>*ctx;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>ctx<sp/>=<sp/>EVP_CIPHER_CTX_new<sp/>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[<ref refid="crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1" kindref="member">KEY_SIZE</ref>];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[<ref refid="crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84" kindref="member">IV_SIZE</ref>];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrounds<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>tmp<sp/>vars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setup<sp/>Encryption<sp/>Key<sp/>and<sp/>Cipher<sp/>Engine<sp/>if<sp/>in<sp/>cipher<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!key_str)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Key_str<sp/>must<sp/>not<sp/>be<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>Key<sp/>from<sp/>String<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>EVP_BytesToKey<sp/>(EVP_aes_256_cbc<sp/>(),<sp/>EVP_sha1<sp/>(),<sp/>NULL,<sp/>key_str,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key_str),<sp/>nrounds,<sp/>key,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iv);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>32)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Key<sp/>size<sp/>is<sp/>%d<sp/>bits<sp/>-<sp/>should<sp/>be<sp/>256<sp/>bits\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Init<sp/>Engine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_init<sp/>(ctx);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CipherInit_ex<sp/>(ctx,<sp/>EVP_aes_256_cbc<sp/>(),<sp/>NULL,<sp/>key,<sp/>iv,<sp/>action);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>through<sp/>Input<sp/>File*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>Block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inlen<sp/>=<sp/>fread<sp/>(inbuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(*inbuf),<sp/><ref refid="crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630" kindref="member">BLOCKSIZE</ref>,<sp/>in);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inlen<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>EOF<sp/>-&gt;<sp/>Break<sp/>Loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>in<sp/>cipher<sp/>mode,<sp/>perform<sp/>cipher<sp/>transform<sp/>on<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EVP_CipherUpdate<sp/>(ctx,<sp/>outbuf,<sp/>&amp;outlen,<sp/>inbuf,<sp/>inlen))</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_cleanup<sp/>(ctx);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>in<sp/>pass-through<sp/>mode.<sp/>copy<sp/>block<sp/>as<sp/>is<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy<sp/>(outbuf,<sp/>inbuf,<sp/>inlen);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlen<sp/>=<sp/>inlen;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>Block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>writelen<sp/>=<sp/>fwrite<sp/>(outbuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(*outbuf),<sp/>outlen,<sp/>out);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writelen<sp/>!=<sp/>outlen)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;fwrite<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_cleanup<sp/>(ctx);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>in<sp/>cipher<sp/>mode,<sp/>handle<sp/>necessary<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>remaining<sp/>cipher<sp/>block<sp/>+<sp/>padding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EVP_CipherFinal_ex<sp/>(ctx,<sp/>outbuf,<sp/>&amp;outlen))</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_cleanup<sp/>(ctx);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>remainign<sp/>cipher<sp/>block<sp/>+<sp/>padding*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite<sp/>(outbuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(*inbuf),<sp/>outlen,<sp/>out);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EVP_CIPHER_CTX_cleanup<sp/>(ctx);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" kindref="member">check_entropy</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>FILE<sp/>*entropy_file<sp/>=<sp/>fopen<sp/>(</highlight><highlight class="stringliteral">&quot;/proc/sys/kernel/random/entropy_avail&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy_file<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>open<sp/>entropy<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entropy_value;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fscanf<sp/>(entropy_file,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;entropy_value)<sp/>!=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>estimate<sp/>entropy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose<sp/>(entropy_file);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>fclose<sp/>(entropy_file);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entropy_value;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" kindref="member">add_entropy</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>FILE<sp/>*urandom<sp/>=<sp/>fopen<sp/>(</highlight><highlight class="stringliteral">&quot;/dev/urandom&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(urandom<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>open<sp/>/dev/urandom&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>random_data[32];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/>fread<sp/>(random_data,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(random_data),<sp/>urandom);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>fclose<sp/>(urandom);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(random_data))</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>read<sp/>data\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>random<sp/>data<sp/>to<sp/>fill<sp/>up<sp/>entropy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>RAND_add<sp/>(random_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(random_data),</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5);<sp/></highlight><highlight class="comment">//<sp/>0.5<sp/>is<sp/>an<sp/>arbitrary<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>fprintf<sp/>(stdout,<sp/></highlight><highlight class="stringliteral">&quot;Entropy<sp/>added<sp/>successfully!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" kindref="member">generate_key</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*destination)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>fprintf<sp/>(stdout,<sp/></highlight><highlight class="stringliteral">&quot;Generating<sp/>a<sp/>new<sp/>key...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Why?<sp/>Because<sp/>if<sp/>we<sp/>try<sp/>to<sp/>create<sp/>a<sp/>large<sp/>number<sp/>of<sp/>files<sp/>there<sp/>might<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>enough<sp/>random<sp/>bytes<sp/>in<sp/>the<sp/>system<sp/>to<sp/>generate<sp/>a<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entropy<sp/>=<sp/><ref refid="crypt-utils_8c_1aa377df016f593aa771013264acc9b86b" kindref="member">check_entropy</ref><sp/>();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entropy<sp/>&lt;<sp/>128)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;WARN:<sp/>not<sp/>enough<sp/>entropy,<sp/>creating<sp/>some...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4" kindref="member">add_entropy</ref><sp/>();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RAND_bytes<sp/>(destination,<sp/>32)<sp/>!=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Err:<sp/>Cannot<sp/>generate<sp/>key\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destination<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)destination)<sp/>==<sp/>32)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" kindref="member">is_valid_key</ref><sp/>(destination)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref>(</highlight><highlight class="stringliteral">&quot;ERR:<sp/>Generated<sp/>key<sp/>is<sp/>invalid\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52" kindref="member">print_aes_key</ref><sp/>(destination);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>destination<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="278" refid="crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6" kindref="member">encrypt_string</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*plaintext,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*encrypted_key_len)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX<sp/>*ctx;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_CIPHER<sp/>*cipher<sp/>=<sp/>EVP_aes_256_cbc<sp/>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[AES_BLOCK_SIZE];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>memset<sp/>(iv,<sp/>0,<sp/>AES_BLOCK_SIZE);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>ctx<sp/>=<sp/>EVP_CIPHER_CTX_new<sp/>();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctx)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>EVP_EncryptInit_ex<sp/>(ctx,<sp/>cipher,<sp/>NULL,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key,<sp/>iv);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>plaintext_len<sp/>=<sp/>strlen<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)plaintext);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ciphertext[plaintext_len<sp/>+<sp/>AES_BLOCK_SIZE];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>memset<sp/>(ciphertext,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(ciphertext));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>total_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>EVP_EncryptUpdate<sp/>(ctx,<sp/>ciphertext,<sp/>&amp;len,<sp/>plaintext,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)plaintext_len);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>total_len<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>EVP_EncryptFinal_ex<sp/>(ctx,<sp/>ciphertext<sp/>+<sp/>total_len,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>total_len<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX_free<sp/>(ctx);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoded_string<sp/>=<sp/>malloc<sp/>(total_len<sp/>*<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!encoded_string)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>total_len;<sp/>i++)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;encoded_string[i<sp/>*<sp/>2],<sp/></highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,<sp/>ciphertext[i]);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>encoded_string[total_len<sp/>*<sp/>2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>*encrypted_key_len<sp/>=<sp/>total_len<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>encoded_string;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="330" refid="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" kindref="member">decrypt_string</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ciphertext,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tHEX<sp/>TO<sp/>STRING<sp/>GOT<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ciphertext);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX<sp/>*ctx;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EVP_CIPHER<sp/>*cipher<sp/>=<sp/>EVP_aes_256_cbc<sp/>();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>iv[AES_BLOCK_SIZE];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>memset<sp/>(iv,<sp/>0,<sp/>AES_BLOCK_SIZE);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>ctx<sp/>=<sp/>EVP_CIPHER_CTX_new<sp/>();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>EVP_DecryptInit_ex<sp/>(ctx,<sp/>cipher,<sp/>NULL,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)key,<sp/>iv);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ciphertext_len<sp/>=<sp/>strlen<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ciphertext)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decoded_ciphertext<sp/>=<sp/>malloc<sp/>(ciphertext_len);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ciphertext_len;<sp/>i++)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hex[3]</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>(char)ciphertext[i<sp/>*<sp/>2],<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)ciphertext[i<sp/>*<sp/>2<sp/>+<sp/>1],<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*endptr;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>=<sp/>strtoul<sp/>(hex,<sp/>&amp;endptr,<sp/>16);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*endptr<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>||<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>&gt;<sp/>UCHAR_MAX)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;decrypt<sp/>string<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded_ciphertext[i]<sp/>=<sp/>byte;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>plaintext[ciphertext_len<sp/>+<sp/>AES_BLOCK_SIZE<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>memset<sp/>(plaintext,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(plaintext));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>EVP_DecryptUpdate<sp/>(ctx,<sp/>plaintext,<sp/>&amp;len,<sp/>decoded_ciphertext,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ciphertext_len);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>padding_len;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>EVP_DecryptFinal_ex<sp/>(ctx,<sp/>plaintext<sp/>+<sp/>len,<sp/>&amp;padding_len);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>EVP_CIPHER_CTX_free<sp/>(ctx);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decrypted_string</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc<sp/>(len<sp/>+<sp/>padding_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>memcpy<sp/>(decrypted_string,<sp/>plaintext,<sp/>len<sp/>+<sp/>padding_len);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>decrypted_string[len<sp/>+<sp/>padding_len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tdecoded_ciphertext<sp/>%s,<sp/>decrypted_string<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoded_ciphertext,<sp/>decrypted_string);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>free<sp/>(decoded_ciphertext);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decrypted_string;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97" kindref="member">is_valid_key</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str[33];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>memcpy<sp/>(str,<sp/>key,<sp/>32);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>str[32]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key_length<sp/>=<sp/>strlen<sp/>(str);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_length<sp/>!=<sp/>32<sp/>?<sp/>false<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="398" refid="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" kindref="member">encrypt_file_name_with_hex</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<ref refid="crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6" kindref="member">encrypt_string</ref><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<ref refid="tcfs__utils_8c_1a819d57d5c053a25772508a943d1bcc48" kindref="member">string_to_hex</ref><sp/>(file),</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="406" refid="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" kindref="member">decrypt_file_name_with_hex</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*enc_file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<ref refid="tcfs__utils_8c_1a6de1cb8448198da94080ad32d7e4eabf" kindref="member">hex_to_string</ref><sp/>(</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<ref refid="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" kindref="member">decrypt_string</ref><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)enc_file,<sp/>key));</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="420" refid="crypt-utils_8c_1ad9b10366ade9f2129ec2613fdc76df80" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1ad9b10366ade9f2129ec2613fdc76df80" kindref="member">encrypt_path</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token,<sp/>*saveptr;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>path<sp/>is<sp/>&quot;.&quot;,<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(path,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp<sp/>(path,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>no<sp/>encryption<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>strdup<sp/>(path);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tencrypt<sp/>path<sp/>got<sp/>a<sp/>special<sp/>case,<sp/>returning<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>path<sp/>is<sp/>/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(path,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tgot<sp/>root<sp/>path\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>original<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path_copy<sp/>=<sp/>strdup<sp/>(path);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!path_copy)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>encryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>token<sp/>=<sp/>strtok_r<sp/>(path_copy,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;saveptr);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>directory<sp/>is<sp/>&quot;.&quot;<sp/>or<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(token,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp<sp/>(token,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>no<sp/>encryption<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encrypt<sp/>each<sp/>part<sp/>of<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encrypted_part<sp/>=<sp/><ref refid="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" kindref="member">encrypt_file_name_with_hex</ref><sp/>(token,<sp/>key);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tEncrypted<sp/>%s<sp/>--&gt;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>encrypted_part);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Concatenate<sp/>to<sp/>the<sp/>result<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>first<sp/>character<sp/>of<sp/>encrypted_part<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encrypted_part[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>malloc<sp/>(strlen<sp/>(encrypted_part)<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy<sp/>(result,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/>encrypted_part);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>strdup<sp/>(encrypted_part);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result_len<sp/>=<sp/>strlen<sp/>(result);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>encrypted_len<sp/>=<sp/>strlen<sp/>(encrypted_part);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>realloc<sp/>(result,<sp/>result_len<sp/>+<sp/>1<sp/>+<sp/>encrypted_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>first<sp/>character<sp/>of<sp/>encrypted_part<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encrypted_part[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/>encrypted_part);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tTempresult:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>part<sp/>of<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok_r<sp/>(NULL,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;saveptr);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>path<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tpathcopy<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>path_copy);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>free<sp/>(path_copy);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tencrypt_path<sp/>will<sp/>return<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="532" refid="crypt-utils_8c_1a5c45db4d3db3ef274fb6356e1a95e644" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a5c45db4d3db3ef274fb6356e1a95e644" kindref="member">encrypt_path_and_filename</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token,<sp/>*saveptr;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>path<sp/>is<sp/>&quot;.&quot;,<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(path,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp<sp/>(path,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>no<sp/>encryption<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>strdup<sp/>(path);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\tencrypt_filename_with_path<sp/>got<sp/>a<sp/>special<sp/>case,<sp/>returning<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>path<sp/>is<sp/>/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(path,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tgot<sp/>root<sp/>path\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>original<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path_copy<sp/>=<sp/>strdup<sp/>(path);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!path_copy)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>encryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>token<sp/>=<sp/>strtok_r<sp/>(path_copy,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;saveptr);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>directory<sp/>is<sp/>&quot;.&quot;<sp/>or<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(token,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp<sp/>(token,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>no<sp/>encryption<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encrypt<sp/>each<sp/>part<sp/>of<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encrypted_part<sp/>=<sp/><ref refid="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" kindref="member">encrypt_file_name_with_hex</ref><sp/>(token,<sp/>key);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tEncrypted<sp/>%s<sp/>--&gt;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>encrypted_part);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Concatenate<sp/>to<sp/>the<sp/>result<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>first<sp/>character<sp/>of<sp/>encrypted_part<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encrypted_part[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>malloc<sp/>(strlen<sp/>(encrypted_part)<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy<sp/>(result,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/>encrypted_part);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>strdup<sp/>(encrypted_part);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result_len<sp/>=<sp/>strlen<sp/>(result);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>encrypted_len<sp/>=<sp/>strlen<sp/>(encrypted_part);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>realloc<sp/>(result,<sp/>result_len<sp/>+<sp/>1<sp/>+<sp/>encrypted_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>first<sp/>character<sp/>of<sp/>encrypted_part<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(encrypted_part[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/>encrypted_part);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tTempresult:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>part<sp/>of<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok_r<sp/>(NULL,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;saveptr);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>path<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tpathcopy<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>path_copy);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>free<sp/>(path_copy);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tencrypt_filename_with_path<sp/>will<sp/>return<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="645" refid="crypt-utils_8c_1a1899c23a523d11ed1cb5601eabdb023d" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a1899c23a523d11ed1cb5601eabdb023d" kindref="member">decrypt_path</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encrypted_path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;decrypt<sp/>path<sp/>got<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>encrypted_path);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token,<sp/>*saveptr;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>encrypted_path<sp/>is<sp/>&quot;.&quot;,<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(encrypted_path,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp<sp/>(encrypted_path,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>no<sp/>decryption<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>strdup<sp/>(encrypted_path);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tdecrypt_path<sp/>got<sp/>a<sp/>special<sp/>case,<sp/>returning<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>encrypted_path<sp/>is<sp/>/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(encrypted_path,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tgot<sp/>root<sp/>path\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>original<sp/>encrypted_path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encrypted_path_copy<sp/>=<sp/>strdup<sp/>(encrypted_path);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!encrypted_path_copy)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>decryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>token<sp/>=<sp/>strtok_r<sp/>(encrypted_path_copy,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;saveptr);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>directory<sp/>is<sp/>&quot;.&quot;<sp/>or<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(token,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp<sp/>(token,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>no<sp/>decryption<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrypt<sp/>each<sp/>part<sp/>of<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decrypted_part<sp/>=<sp/><ref refid="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" kindref="member">decrypt_file_name_with_hex</ref><sp/>(token,<sp/>key);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tDecrypted<sp/>%s<sp/>--&gt;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>decrypted_part);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Concatenate<sp/>to<sp/>the<sp/>result<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>first<sp/>character<sp/>of<sp/>decrypted_part<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decrypted_part[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>malloc<sp/>(strlen<sp/>(decrypted_part)<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy<sp/>(result,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/>decrypted_part);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>strdup<sp/>(decrypted_part);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result_len<sp/>=<sp/>strlen<sp/>(result);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>decrypted_len<sp/>=<sp/>strlen<sp/>(decrypted_part);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>realloc<sp/>(result,<sp/>result_len<sp/>+<sp/>1<sp/>+<sp/>decrypted_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>first<sp/>character<sp/>of<sp/>decrypted_part<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decrypted_part[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/>decrypted_part);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tTempresult:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>part<sp/>of<sp/>the<sp/>encrypted_path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok_r<sp/>(NULL,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;saveptr);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>encrypted_path<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tencrypted_path_copy<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>encrypted_path_copy);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>free<sp/>(encrypted_path_copy);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tdecrypt_path<sp/>will<sp/>return<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="759" refid="crypt-utils_8c_1a373f8aedbcd8b6ce22fe7bdfeb2961c2" refkind="member"><highlight class="normal"><ref refid="crypt-utils_8c_1a373f8aedbcd8b6ce22fe7bdfeb2961c2" kindref="member">decrypt_path_and_filename</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encrypted_path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token,<sp/>*saveptr;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>encrypted_path<sp/>is<sp/>&quot;.&quot;,<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(encrypted_path,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp<sp/>(encrypted_path,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>no<sp/>decryption<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>strdup<sp/>(encrypted_path);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\tdecrypt_filename_with_path<sp/>got<sp/>a<sp/>special<sp/>case,<sp/>returning<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>encrypted_path<sp/>is<sp/>/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(encrypted_path,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tgot<sp/>root<sp/>path\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>original<sp/>encrypted_path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encrypted_path_copy<sp/>=<sp/>strdup<sp/>(encrypted_path);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!encrypted_path_copy)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>decryption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>token<sp/>=<sp/>strtok_r<sp/>(encrypted_path_copy,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;saveptr);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>directory<sp/>is<sp/>&quot;.&quot;<sp/>or<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp<sp/>(token,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp<sp/>(token,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>no<sp/>decryption<sp/>is<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrypt<sp/>each<sp/>part<sp/>of<sp/>the<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decrypted_part<sp/>=<sp/><ref refid="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" kindref="member">decrypt_file_name_with_hex</ref><sp/>(token,<sp/>key);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tDecrypted<sp/>%s<sp/>--&gt;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>token,<sp/>decrypted_part);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Concatenate<sp/>to<sp/>the<sp/>result<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>first<sp/>character<sp/>of<sp/>decrypted_part<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decrypted_part[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>malloc<sp/>(strlen<sp/>(decrypted_part)<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy<sp/>(result,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/>decrypted_part);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>strdup<sp/>(decrypted_part);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result_len<sp/>=<sp/>strlen<sp/>(result);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>decrypted_len<sp/>=<sp/>strlen<sp/>(decrypted_part);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>realloc<sp/>(result,<sp/>result_len<sp/>+<sp/>1<sp/>+<sp/>decrypted_len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error<sp/>allocating<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit<sp/>(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>first<sp/>character<sp/>of<sp/>decrypted_part<sp/>is<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decrypted_part[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(result,<sp/>decrypted_part);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tTempresult:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>part<sp/>of<sp/>the<sp/>encrypted_path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok_r<sp/>(NULL,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>&amp;saveptr);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>encrypted_path<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tencrypted_path_copy<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>encrypted_path_copy);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>free<sp/>(encrypted_path_copy);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tdecrypt_filename_with_path<sp/>will<sp/>return<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="userspace-module/utils/crypt-utils/crypt-utils.c"/>
  </compounddef>
</doxygen>
