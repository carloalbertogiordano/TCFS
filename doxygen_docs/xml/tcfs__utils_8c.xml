<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="tcfs__utils_8c" kind="file" language="C++">
    <compoundname>tcfs_utils.c</compoundname>
    <includes refid="tcfs__utils_8h" local="yes">tcfs_utils.h</includes>
    <includes refid="crypt-utils_8h" local="yes">../crypt-utils/crypt-utils.h</includes>
    <incdepgraph>
      <node id="11">
        <label>../crypt-utils/crypt-utils.h</label>
        <link refid="crypt-utils_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>userspace-module/utils/tcfs_utils/tcfs_utils.c</label>
        <link refid="tcfs__utils_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tcfs_utils.h</label>
        <link refid="tcfs__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ctype.h</label>
      </node>
      <node id="3">
        <label>errno.h</label>
      </node>
      <node id="13">
        <label>libgen.h</label>
      </node>
      <node id="15">
        <label>openssl/aes.h</label>
      </node>
      <node id="16">
        <label>openssl/bio.h</label>
      </node>
      <node id="17">
        <label>openssl/buffer.h</label>
      </node>
      <node id="18">
        <label>openssl/evp.h</label>
      </node>
      <node id="19">
        <label>openssl/rand.h</label>
      </node>
      <node id="4">
        <label>pwd.h</label>
      </node>
      <node id="10">
        <label>stdbool.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="14">
        <label>sys/mman.h</label>
      </node>
      <node id="8">
        <label>sys/xattr.h</label>
      </node>
      <node id="9">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="tcfs__utils_8c_1aac1b7fab3a13b4cfcc0b34eb7511df55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void get_user_name</definition>
        <argsstring>(char *buf, size_t size)</argsstring>
        <name>get_user_name</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Fetch the username of the current user. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer where the username will be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
<simplesect kind="note"><para>If an error occurs, it will be printed, and the buffer will not be modified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="19" column="1" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="19" bodyend="27"/>
        <referencedby refid="tcfs_8c_1a745384a010e20b082db26e16702a0129" compoundref="tcfs_8c" startline="734" endline="815">tcfs_read</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcfs__utils_8c_1a71e44dc105c7af8349bc3e7eb9edf2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_encrypted</definition>
        <argsstring>(const char *path)</argsstring>
        <name>is_encrypted</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Check if a file is encrypted by TCFS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path of the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. An error might be printen by print_err() function, </para>
</simplesect>
<simplesect kind="see"><para>print_err </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="35" column="1" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="35" bodyend="43"/>
        <referencedby refid="tcfs__utils_8c_1a4316eb58a0cb5afb4e90e75a55c9b3ea" compoundref="tcfs__utils_8c" startline="123" endline="153">get_encrypted_key</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcfs__utils_8c_1ac4ff59963f4a122c9f802c0c2bf2abc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * prefix_path</definition>
        <argsstring>(const char *path, const char *realpath)</argsstring>
        <name>prefix_path</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>realpath</declname>
        </param>
        <briefdescription>
<para>Prefix the realpath to the fuse path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The fuse path. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>realpath</parametername>
</parameternamelist>
<parameterdescription>
<para>The realpath to the directory mounted by TCFS. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char * An allocated string containing the full path to the file. </para>
</simplesect>
<simplesect kind="note"><para>Please free the result after use. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="53" column="1" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="53" bodyend="85"/>
        <referencedby refid="tcfs_8c_1a76af7857833338c73b9cafdce59ca01d" compoundref="tcfs_8c" startline="132" endline="149">tcfs_access</referencedby>
        <referencedby refid="tcfs_8c_1a3cb10be0f6147667dc0e757636e9892f" compoundref="tcfs_8c" startline="497" endline="516">tcfs_chmod</referencedby>
        <referencedby refid="tcfs_8c_1afff31b61fa0723502cf85922816f14f9" compoundref="tcfs_8c" startline="530" endline="546">tcfs_chown</referencedby>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="1031" endline="1099">tcfs_create</referencedby>
        <referencedby refid="tcfs_8c_1a014853840814f4d5225e2e28e129f9e5" compoundref="tcfs_8c" startline="1140" endline="1161">tcfs_fsync</referencedby>
        <referencedby refid="tcfs_8c_1a411eac4511d0eae4ce78a2fd3d22ac8c" compoundref="tcfs_8c" startline="99" endline="120">tcfs_getattr</referencedby>
        <referencedby refid="tcfs_8c_1a6a031c4e3c6dd59051c09789c4666657" compoundref="tcfs_8c" startline="1199" endline="1215">tcfs_getxattr</referencedby>
        <referencedby refid="tcfs_8c_1a271df7bd878f5ed132e1f98487e8aebd" compoundref="tcfs_8c" startline="465" endline="484">tcfs_link</referencedby>
        <referencedby refid="tcfs_8c_1ae6edcf6a80467925a9a2112172395de1" compoundref="tcfs_8c" startline="1229" endline="1243">tcfs_listxattr</referencedby>
        <referencedby refid="tcfs_8c_1a682b553345b6d872453d1ace7339bb9e" compoundref="tcfs_8c" startline="324" endline="340">tcfs_mkdir</referencedby>
        <referencedby refid="tcfs_8c_1a151f53359474a95c52f5e79d438869bd" compoundref="tcfs_8c" startline="286" endline="312">tcfs_mknod</referencedby>
        <referencedby refid="tcfs_8c_1af0c6a7d66189cc1e9fbfafba5255e60d" compoundref="tcfs_8c" startline="651" endline="670">tcfs_open</referencedby>
        <referencedby refid="tcfs_8c_1a92ebab5be45b159c2850a47a5072b58d" compoundref="tcfs_8c" startline="67" endline="86">tcfs_opendir</referencedby>
        <referencedby refid="tcfs_8c_1a745384a010e20b082db26e16702a0129" compoundref="tcfs_8c" startline="734" endline="815">tcfs_read</referencedby>
        <referencedby refid="tcfs_8c_1a1a713549c892f56a6522e6487c581d69" compoundref="tcfs_8c" startline="196" endline="273">tcfs_readdir</referencedby>
        <referencedby refid="tcfs_8c_1acb1e081efcbf61b6f34e8bbdf7af8979" compoundref="tcfs_8c" startline="162" endline="180">tcfs_readlink</referencedby>
        <referencedby refid="tcfs_8c_1a1241e1fcfe6bb4a5d49d8c8d4e737bcd" compoundref="tcfs_8c" startline="1111" endline="1127">tcfs_release</referencedby>
        <referencedby refid="tcfs_8c_1acfe2c6a9467bd25a5ba6dc1a65209262" compoundref="tcfs_8c" startline="1273" endline="1287">tcfs_removexattr</referencedby>
        <referencedby refid="tcfs_8c_1aee96b732a1569a607e63bac6fbe5c403" compoundref="tcfs_8c" startline="436" endline="453">tcfs_rename</referencedby>
        <referencedby refid="tcfs_8c_1a2853593dded66a922afbdc36afb15a50" compoundref="tcfs_8c" startline="377" endline="392">tcfs_rmdir</referencedby>
        <referencedby refid="tcfs_8c_1ad3c328fdcd93c8203e1ce9c785fd3a14" compoundref="tcfs_8c" startline="979" endline="992">tcfs_setxattr</referencedby>
        <referencedby refid="tcfs_8c_1ae14ebf4581d4cbc45737ae75af82a887" compoundref="tcfs_8c" startline="952" endline="964">tcfs_statfs</referencedby>
        <referencedby refid="tcfs_8c_1ac1d223f9b998d5af6bec3947d03be0fc" compoundref="tcfs_8c" startline="404" endline="423">tcfs_symlink</referencedby>
        <referencedby refid="tcfs_8c_1a7e7f7a65b4e76cc96505d0c6d62fba9c" compoundref="tcfs_8c" startline="559" endline="577">tcfs_truncate</referencedby>
        <referencedby refid="tcfs_8c_1ac6d3a8a626363a6f98de64e585968b09" compoundref="tcfs_8c" startline="351" endline="366">tcfs_unlink</referencedby>
        <referencedby refid="tcfs_8c_1aca5dccf989dfc270ca31e1d8b20bb60e" compoundref="tcfs_8c" startline="612" endline="638">tcfs_utimens</referencedby>
        <referencedby refid="tcfs_8c_1adaba2baa5a036b8f77ec187599498a66" compoundref="tcfs_8c" startline="830" endline="915">tcfs_write</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcfs__utils_8c_1a42623317bb0b1ff095b4d946dc085bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_file</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>read_file</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Read a file, useful for debugging tmpfiles. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Currently has no use. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="note"><para>It will print &quot;file was empty&quot; if the file was empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="95" column="1" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="95" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="tcfs__utils_8c_1a4316eb58a0cb5afb4e90e75a55c9b3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_encrypted_key</definition>
        <argsstring>(char *filepath, unsigned char *encrypted_key)</argsstring>
        <name>get_encrypted_key</name>
        <param>
          <type>char *</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>encrypted_key</declname>
        </param>
        <briefdescription>
<para>Get the xattr value describing the key of a file. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Currently has no use. Was once used for debugging. </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filepath</parametername>
</parameternamelist>
<parameterdescription>
<para>The full path of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encrypted_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to save the encrypted key to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if successful, 0 otherwise. An error might be printen by print_err() function, </para>
</simplesect>
<simplesect kind="see"><para>print_err </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="123" column="1" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="123" bodyend="153"/>
        <references refid="tcfs__utils_8c_1a71e44dc105c7af8349bc3e7eb9edf2b0" compoundref="tcfs__utils_8c" startline="35" endline="43">is_encrypted</references>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
      </memberdef>
      <memberdef kind="function" id="tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_aes_key</definition>
        <argsstring>(unsigned char *key)</argsstring>
        <name>print_aes_key</name>
        <param>
          <type>unsigned char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Print the value of an AES key. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Currently has no use. Printing the AES key is considered excessive. </para>
</xrefdescription></xrefsect><simplesect kind="warning"><para>THIS WILL PRINT THE AES KEY TO STDOUT. TCFS trusts the user by design, but this is excessive. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The string containing the key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="165" column="1" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="165" bodyend="173"/>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
        <referencedby refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" compoundref="crypt-utils_8c" startline="235" endline="266">generate_key</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcfs__utils_8c_1a819d57d5c053a25772508a943d1bcc48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * string_to_hex</definition>
        <argsstring>(const char *input)</argsstring>
        <name>string_to_hex</name>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Convert a string to its hexadecimal representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char * The hexadecimal representation of the input string. </para>
</simplesect>
<simplesect kind="note"><para>Remember to free the result after use. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="182" column="1" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="182" bodyend="209"/>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
        <referencedby refid="crypt-utils_8c_1aa4a7facde8c6f63a7225c07e92232b2e" compoundref="crypt-utils_8c" startline="398" endline="403">encrypt_file_name_with_hex</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcfs__utils_8c_1a6de1cb8448198da94080ad32d7e4eabf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * hex_to_string</definition>
        <argsstring>(const char *input)</argsstring>
        <name>hex_to_string</name>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Convert a hexadecimal string to its ASCII representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input hexadecimal string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char * The ASCII representation of the input hexadecimal string. </para>
</simplesect>
<simplesect kind="note"><para>Remember to free the result after use. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="218" column="1" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="218" bodyend="251"/>
        <references refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" compoundref="tcfs__utils_8c" startline="262" endline="314">logMessage</references>
        <referencedby refid="crypt-utils_8c_1a3b003481e5c188ac1d6f63e09e6f3a34" compoundref="crypt-utils_8c" startline="406" endline="410">decrypt_file_name_with_hex</referencedby>
      </memberdef>
      <memberdef kind="function" id="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logMessage</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>logMessage</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Logs a formatted message to a file with timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para>This function logs a formatted message to a specified log file along with a timestamp. It accepts a variable number of parameters, similar to printf.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string for the log message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional parameters to be formatted into the log message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c" line="262" column="6" bodyfile="userspace-module/utils/tcfs_utils/tcfs_utils.c" bodystart="262" bodyend="314"/>
        <references refid="tcfs__utils_8h_1ad72dbcf6d0153db1b8d8a58001feed83" compoundref="tcfs__utils_8h" startline="22">DEBUG</references>
        <references refid="tcfs__utils_8h_1a6d3fef197146b932f5ad01fce683a66b" compoundref="tcfs__utils_8h" startline="20">LOGFILE</references>
        <referencedby refid="crypt-utils_8c_1a1899c23a523d11ed1cb5601eabdb023d" compoundref="crypt-utils_8c" startline="645" endline="747">decrypt_path</referencedby>
        <referencedby refid="crypt-utils_8c_1a373f8aedbcd8b6ce22fe7bdfeb2961c2" compoundref="crypt-utils_8c" startline="759" endline="862">decrypt_path_and_filename</referencedby>
        <referencedby refid="crypt-utils_8c_1a22f528907ee4f078e333501b747d5435" compoundref="crypt-utils_8c" startline="330" endline="379">decrypt_string</referencedby>
        <referencedby refid="crypt-utils_8c_1ad9b10366ade9f2129ec2613fdc76df80" compoundref="crypt-utils_8c" startline="420" endline="521">encrypt_path</referencedby>
        <referencedby refid="crypt-utils_8c_1a5c45db4d3db3ef274fb6356e1a95e644" compoundref="crypt-utils_8c" startline="532" endline="635">encrypt_path_and_filename</referencedby>
        <referencedby refid="crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f" compoundref="crypt-utils_8c" startline="235" endline="266">generate_key</referencedby>
        <referencedby refid="tcfs__utils_8c_1a4316eb58a0cb5afb4e90e75a55c9b3ea" compoundref="tcfs__utils_8c" startline="123" endline="153">get_encrypted_key</referencedby>
        <referencedby refid="tcfs__utils_8c_1a6de1cb8448198da94080ad32d7e4eabf" compoundref="tcfs__utils_8c" startline="218" endline="251">hex_to_string</referencedby>
        <referencedby refid="tcfs_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="tcfs_8c" startline="1412" endline="1461">main</referencedby>
        <referencedby refid="tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52" compoundref="tcfs__utils_8c" startline="165" endline="173">print_aes_key</referencedby>
        <referencedby refid="tcfs__utils_8c_1a819d57d5c053a25772508a943d1bcc48" compoundref="tcfs__utils_8c" startline="182" endline="209">string_to_hex</referencedby>
        <referencedby refid="tcfs_8c_1a76af7857833338c73b9cafdce59ca01d" compoundref="tcfs_8c" startline="132" endline="149">tcfs_access</referencedby>
        <referencedby refid="tcfs_8c_1a3cb10be0f6147667dc0e757636e9892f" compoundref="tcfs_8c" startline="497" endline="516">tcfs_chmod</referencedby>
        <referencedby refid="tcfs_8c_1afff31b61fa0723502cf85922816f14f9" compoundref="tcfs_8c" startline="530" endline="546">tcfs_chown</referencedby>
        <referencedby refid="tcfs_8c_1ad973ad9d6ab7d6276bf85cd8fecd0657" compoundref="tcfs_8c" startline="1031" endline="1099">tcfs_create</referencedby>
        <referencedby refid="tcfs_8c_1a014853840814f4d5225e2e28e129f9e5" compoundref="tcfs_8c" startline="1140" endline="1161">tcfs_fsync</referencedby>
        <referencedby refid="tcfs_8c_1a411eac4511d0eae4ce78a2fd3d22ac8c" compoundref="tcfs_8c" startline="99" endline="120">tcfs_getattr</referencedby>
        <referencedby refid="tcfs_8c_1a6a031c4e3c6dd59051c09789c4666657" compoundref="tcfs_8c" startline="1199" endline="1215">tcfs_getxattr</referencedby>
        <referencedby refid="tcfs_8c_1a271df7bd878f5ed132e1f98487e8aebd" compoundref="tcfs_8c" startline="465" endline="484">tcfs_link</referencedby>
        <referencedby refid="tcfs_8c_1ae6edcf6a80467925a9a2112172395de1" compoundref="tcfs_8c" startline="1229" endline="1243">tcfs_listxattr</referencedby>
        <referencedby refid="tcfs_8c_1a682b553345b6d872453d1ace7339bb9e" compoundref="tcfs_8c" startline="324" endline="340">tcfs_mkdir</referencedby>
        <referencedby refid="tcfs_8c_1a151f53359474a95c52f5e79d438869bd" compoundref="tcfs_8c" startline="286" endline="312">tcfs_mknod</referencedby>
        <referencedby refid="tcfs_8c_1af0c6a7d66189cc1e9fbfafba5255e60d" compoundref="tcfs_8c" startline="651" endline="670">tcfs_open</referencedby>
        <referencedby refid="tcfs_8c_1a92ebab5be45b159c2850a47a5072b58d" compoundref="tcfs_8c" startline="67" endline="86">tcfs_opendir</referencedby>
        <referencedby refid="tcfs_8c_1a745384a010e20b082db26e16702a0129" compoundref="tcfs_8c" startline="734" endline="815">tcfs_read</referencedby>
        <referencedby refid="tcfs_8c_1a1a713549c892f56a6522e6487c581d69" compoundref="tcfs_8c" startline="196" endline="273">tcfs_readdir</referencedby>
        <referencedby refid="tcfs_8c_1acb1e081efcbf61b6f34e8bbdf7af8979" compoundref="tcfs_8c" startline="162" endline="180">tcfs_readlink</referencedby>
        <referencedby refid="tcfs_8c_1a1241e1fcfe6bb4a5d49d8c8d4e737bcd" compoundref="tcfs_8c" startline="1111" endline="1127">tcfs_release</referencedby>
        <referencedby refid="tcfs_8c_1acfe2c6a9467bd25a5ba6dc1a65209262" compoundref="tcfs_8c" startline="1273" endline="1287">tcfs_removexattr</referencedby>
        <referencedby refid="tcfs_8c_1aee96b732a1569a607e63bac6fbe5c403" compoundref="tcfs_8c" startline="436" endline="453">tcfs_rename</referencedby>
        <referencedby refid="tcfs_8c_1a2853593dded66a922afbdc36afb15a50" compoundref="tcfs_8c" startline="377" endline="392">tcfs_rmdir</referencedby>
        <referencedby refid="tcfs_8c_1ad3c328fdcd93c8203e1ce9c785fd3a14" compoundref="tcfs_8c" startline="979" endline="992">tcfs_setxattr</referencedby>
        <referencedby refid="tcfs_8c_1ae14ebf4581d4cbc45737ae75af82a887" compoundref="tcfs_8c" startline="952" endline="964">tcfs_statfs</referencedby>
        <referencedby refid="tcfs_8c_1ac1d223f9b998d5af6bec3947d03be0fc" compoundref="tcfs_8c" startline="404" endline="423">tcfs_symlink</referencedby>
        <referencedby refid="tcfs_8c_1a7e7f7a65b4e76cc96505d0c6d62fba9c" compoundref="tcfs_8c" startline="559" endline="577">tcfs_truncate</referencedby>
        <referencedby refid="tcfs_8c_1ac6d3a8a626363a6f98de64e585968b09" compoundref="tcfs_8c" startline="351" endline="366">tcfs_unlink</referencedby>
        <referencedby refid="tcfs_8c_1aca5dccf989dfc270ca31e1d8b20bb60e" compoundref="tcfs_8c" startline="612" endline="638">tcfs_utimens</referencedby>
        <referencedby refid="tcfs_8c_1adaba2baa5a036b8f77ec187599498a66" compoundref="tcfs_8c" startline="830" endline="915">tcfs_write</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>This file contains an assortment of functions used by <ref refid="tcfs_8c" kindref="compound">tcfs.c</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="tcfs_8c" kindref="compound">tcfs.c</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tcfs__utils_8h" kindref="compound">tcfs_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../crypt-utils/crypt-utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="tcfs__utils_8c_1aac1b7fab3a13b4cfcc0b34eb7511df55" refkind="member"><highlight class="normal"><ref refid="tcfs__utils_8c_1aac1b7fab3a13b4cfcc0b34eb7511df55" kindref="member">get_user_name</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>uid_t<sp/>uid<sp/>=<sp/>geteuid<sp/>();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">passwd<sp/>*pw<sp/>=<sp/>getpwuid<sp/>(uid);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pw)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf<sp/>(buf,<sp/>size,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>pw-&gt;pw_name);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Could<sp/>not<sp/>retrieve<sp/>username.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="tcfs__utils_8c_1a71e44dc105c7af8349bc3e7eb9edf2b0" refkind="member"><highlight class="normal"><ref refid="tcfs__utils_8c_1a71e44dc105c7af8349bc3e7eb9edf2b0" kindref="member">is_encrypted</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>xattr_val[5];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>getxattr<sp/>(path,<sp/></highlight><highlight class="stringliteral">&quot;user.encrypted&quot;</highlight><highlight class="normal">,<sp/>xattr_val,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>5);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>xattr_val[4]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp<sp/>(xattr_val,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>?<sp/>true<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="53" refid="tcfs__utils_8c_1ac4ff59963f4a122c9f802c0c2bf2abc8" refkind="member"><highlight class="normal"><ref refid="tcfs__utils_8c_1ac4ff59963f4a122c9f802c0c2bf2abc8" kindref="member">prefix_path</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*realpath)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>==<sp/>NULL<sp/>||<sp/>realpath<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;WARN:<sp/>path<sp/>or<sp/>realpath<sp/>is<sp/>null\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)path;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(realpath<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realpath;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen<sp/>(path)<sp/>+<sp/>strlen<sp/>(realpath)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*root_dir<sp/>=<sp/>malloc<sp/>(len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root_dir<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Err:<sp/>Could<sp/>not<sp/>allocate<sp/>memory<sp/>while<sp/>in<sp/>prefix_path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcpy<sp/>(root_dir,<sp/>realpath)<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;strcpy:<sp/>Cannot<sp/>copy<sp/>path&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcat<sp/>(root_dir,<sp/>path)<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;strcat:<sp/>in<sp/>prefix_path<sp/>cannot<sp/>concatenate<sp/>the<sp/>paths&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>root_dir;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="tcfs__utils_8c_1a42623317bb0b1ff095b4d946dc085bd6" refkind="member"><highlight class="normal"><ref refid="tcfs__utils_8c_1a42623317bb0b1ff095b4d946dc085bd6" kindref="member">read_file</ref><sp/>(FILE<sp/>*file)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_contains_something<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>FILE<sp/>*read<sp/>=<sp/>file;<sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>move<sp/>original<sp/>file<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>getc<sp/>(read))<sp/>!=<sp/>EOF)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_contains_something<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>putc<sp/>(c,<sp/>stderr);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file_contains_something)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf<sp/>(stderr,<sp/></highlight><highlight class="stringliteral">&quot;file<sp/>was<sp/>empty\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>rewind<sp/>(file);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>fseek(tmpf,<sp/>offset,<sp/>SEEK_END);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="tcfs__utils_8c_1a4316eb58a0cb5afb4e90e75a55c9b3ea" refkind="member"><highlight class="normal"><ref refid="tcfs__utils_8c_1a4316eb58a0cb5afb4e90e75a55c9b3ea" kindref="member">get_encrypted_key</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filepath,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encrypted_key)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tGet<sp/>Encrypted<sp/>key<sp/>for<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filepath);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tcfs__utils_8c_1a71e44dc105c7af8349bc3e7eb9edf2b0" kindref="member">is_encrypted</ref><sp/>(filepath)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tencrypted<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*src_file<sp/>=<sp/>fopen<sp/>(filepath,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_file<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose<sp/>(src_file);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>the<sp/>file<sp/>to<sp/>get<sp/>the<sp/>key&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-errno;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_fd;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src_fd<sp/>=<sp/>fileno<sp/>(src_file);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_fd<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose<sp/>(src_file);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>fd<sp/>for<sp/>the<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-errno;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fgetxattr<sp/>(src_fd,<sp/></highlight><highlight class="stringliteral">&quot;user.key&quot;</highlight><highlight class="normal">,<sp/>encrypted_key,<sp/>33)<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose<sp/>(src_file);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52" refkind="member"><highlight class="normal"><ref refid="tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52" kindref="member">print_aes_key</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;AES<sp/>HEX:%s<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">,<sp/>key);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>i++)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,<sp/>key[i]);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="182" refid="tcfs__utils_8c_1a819d57d5c053a25772508a943d1bcc48" refkind="member"><highlight class="normal"><ref refid="tcfs__utils_8c_1a819d57d5c053a25772508a943d1bcc48" kindref="member">string_to_hex</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tSTRING<sp/>TO<sp/>HEX<sp/>GOT<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>input);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen<sp/>(input);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hex[3];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc<sp/>(2<sp/>*<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Errore<sp/>di<sp/>allocazione<sp/>di<sp/>memoria&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>the<sp/>resulting<sp/>string<sp/>is<sp/>empty<sp/>at<sp/>the<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maybe<sp/>it<sp/>is<sp/>not<sp/>necessary,<sp/>but<sp/>some<sp/>testing<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>output[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf<sp/>(hex,<sp/></highlight><highlight class="stringliteral">&quot;%02X&quot;</highlight><highlight class="normal">,<sp/>input[i]);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcat<sp/>(output,<sp/>hex);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\t\tSTRING<sp/>TO<sp/>HEX<sp/>WILL<sp/>RETURN<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="218" refid="tcfs__utils_8c_1a6de1cb8448198da94080ad32d7e4eabf" refkind="member"><highlight class="normal"><ref refid="tcfs__utils_8c_1a6de1cb8448198da94080ad32d7e4eabf" kindref="member">hex_to_string</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tHEX<sp/>TO<sp/>STRING<sp/>GOT<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>input);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>len<sp/>=<sp/>strlen<sp/>(input)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc<sp/>(len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!output)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror<sp/>(</highlight><highlight class="stringliteral">&quot;Errore<sp/>di<sp/>allocazione<sp/>di<sp/>memoria&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>the<sp/>resulting<sp/>string<sp/>is<sp/>empty<sp/>at<sp/>the<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maybe<sp/>it<sp/>is<sp/>not<sp/>necessary,<sp/>but<sp/>some<sp/>testing<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>output[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hex[3];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hex[0]<sp/>=<sp/>input[2<sp/>*<sp/>i];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hex[1]<sp/>=<sp/>input[2<sp/>*<sp/>i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hex[2]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decimal;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sscanf<sp/>(hex,<sp/></highlight><highlight class="stringliteral">&quot;%X&quot;</highlight><highlight class="normal">,<sp/>&amp;decimal);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>=<sp/>(char)decimal;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>output[len]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>\0<sp/>terminator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref><sp/>(</highlight><highlight class="stringliteral">&quot;\tHEX<sp/>TO<sp/>STRING<sp/>WILL<sp/>RETURN<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tcfs__utils_8c_1a62b66e43a7ad8b8cf9fcad67f71a7a8b" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*home_path<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;HOME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(home_path<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>case<sp/>where<sp/>HOME<sp/>environment<sp/>variable<sp/>is<sp/>not<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>get<sp/>HOME<sp/>environment<sp/>variable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>home_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>log_path_length<sp/>=<sp/>strlen(home_path)<sp/>+<sp/>strlen(<ref refid="tcfs__utils_8h_1a6d3fef197146b932f5ad01fce683a66b" kindref="member">LOGFILE</ref>)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*log_path<sp/>=<sp/>malloc(log_path_length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>strcpy(log_path,<sp/>home_path);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>strcat(log_path,<sp/><ref refid="tcfs__utils_8h_1a6d3fef197146b932f5ad01fce683a66b" kindref="member">LOGFILE</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>FILE<sp/>*logFile<sp/>=<sp/>fopen(log_path,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logFile<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;OPEN<sp/>FAILED<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>log_path);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>open<sp/>log<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(log_path);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>time_t<sp/>rawtime;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>*timeinfo;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>time(&amp;rawtime);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>timeinfo<sp/>=<sp/>localtime(&amp;rawtime);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>fprintf(logFile,<sp/></highlight><highlight class="stringliteral">&quot;[%04d-%02d-%02d<sp/>%02d:%02d:%02d]<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeinfo-&gt;tm_year<sp/>+<sp/>1900,<sp/>timeinfo-&gt;tm_mon<sp/>+<sp/>1,<sp/>timeinfo-&gt;tm_mday,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeinfo-&gt;tm_hour,<sp/>timeinfo-&gt;tm_min,<sp/>timeinfo-&gt;tm_sec);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>vfprintf(logFile,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>fprintf(logFile,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="tcfs__utils_8h_1ad72dbcf6d0153db1b8d8a58001feed83" kindref="member">DEBUG</ref>)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vprintf(format,<sp/>args);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Chiudi<sp/>il<sp/>file<sp/>di<sp/>log<sp/>e<sp/>libera<sp/>la<sp/>memoria<sp/>allocata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>fclose(logFile);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>free(log_path);</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="userspace-module/utils/tcfs_utils/tcfs_utils.c"/>
  </compounddef>
</doxygen>
