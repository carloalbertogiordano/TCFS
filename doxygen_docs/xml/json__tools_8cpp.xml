<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="json__tools_8cpp" kind="file" language="C++">
    <compoundname>json_tools.cpp</compoundname>
    <includes refid="common_8h" local="yes">../../common.h</includes>
    <includes refid="print__utils_8h" local="yes">../print/print_utils.h</includes>
    <includes local="yes">/usr/include/nlohmann/json.hpp</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string.h</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="2">
        <label>../../common.h</label>
        <link refid="common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>daemon/daemon_utils/common_utils/json/json_tools.cpp</label>
        <link refid="json__tools_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>../print/print_utils.h</label>
        <link refid="print__utils_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/usr/include/nlohmann/json.hpp</label>
      </node>
      <node id="15">
        <label>cstdlib</label>
      </node>
      <node id="16">
        <label>cstring</label>
      </node>
      <node id="9">
        <label>errno.h</label>
      </node>
      <node id="5">
        <label>fcntl.h</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>mqueue.h</label>
      </node>
      <node id="11">
        <label>stdio.h</label>
      </node>
      <node id="12">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>sys/stat.h</label>
      </node>
      <node id="4">
        <label>sys/types.h</label>
      </node>
      <node id="13">
        <label>systemd/sd-journal.h</label>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="json__tools_8cpp_1abe22bc6ace23fc8f7e186a824784765f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * struct_to_json</definition>
        <argsstring>(qm_type qmt, void *q_mess)</argsstring>
        <name>struct_to_json</name>
        <param>
          <type><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4c" kindref="member">qm_type</ref></type>
          <declname>qmt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>q_mess</declname>
        </param>
        <briefdescription>
<para>Cast a <ref refid="structqm__user" kindref="compound">qm_user</ref>, <ref refid="structqm__shared" kindref="compound">qm_shared</ref> or <ref refid="structqm__broad" kindref="compound">qm_broad</ref> struct to a json string representing the struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>qmt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="common_8h" kindref="compound">common.h</ref> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q_mess</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure from which the json will be built </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char* The json string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daemon/daemon_utils/common_utils/json/json_tools.cpp" line="27" column="1" bodyfile="daemon/daemon_utils/common_utils/json/json_tools.cpp" bodystart="27" bodyend="79"/>
        <references refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca78386e426adecb3fd26350119a3cb7c2" compoundref="common_8h" startline="41">BROADCAST</references>
        <references refid="structqm__broad_1a59096b6c11d45cf9addecfb629b55978" compoundref="common_8h" startline="87">qm_broad::data</references>
        <references refid="structqm__shared_1ac6ce7156e06279b3194acb24e4face96" compoundref="common_8h" startline="76">qm_shared::fd</references>
        <references refid="structqm__shared_1afef3f8b7e15af861010c6e0d66de659e" compoundref="common_8h" startline="78">qm_shared::keypart</references>
        <references refid="structqm__user_1aa69546c3a6a2124be9f964329c951a84" compoundref="common_8h" startline="63">qm_user::pid</references>
        <references refid="print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0" compoundref="print__utils_8c" startline="100" endline="111">print_msg</references>
        <references refid="structqm__user_1ad718cfba201afae89c596111bd508d5f" compoundref="common_8h" startline="65">qm_user::pubkey</references>
        <references refid="common_8h_1ad30dd7f5c8fc3f0027bbddc111c652b8aceb7c305772dab23a260960771180df3" compoundref="common_8h" startline="52">REGISTER</references>
        <references refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca9c46e16a4ab019339596acadeefc8c53" compoundref="common_8h" startline="40">SHARED</references>
        <references refid="common_8h_1ad30dd7f5c8fc3f0027bbddc111c652b8ad46a7713a16573956ea43782ac970154" compoundref="common_8h" startline="53">UNREGISTER</references>
        <references refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4cae2d30a195cee6b2961cc2c23ea4b520b" compoundref="common_8h" startline="39">USER</references>
        <references refid="structqm__user_1a6c52d68724b65831ba6d95f3d7448ff4" compoundref="common_8h" startline="64">qm_user::user</references>
        <references refid="structqm__user_1a4b5bbaaf885c62f44f265eeba461303d" compoundref="common_8h" startline="62">qm_user::user_op</references>
        <references refid="structqm__shared_1af2a26858d769e4a816d0567b51ce0ed5" compoundref="common_8h" startline="77">qm_shared::userlist</references>
        <referencedby refid="queue_8c_1ac51f5d595a9d7376eb0448116c99e1f4" compoundref="queue_8c" startline="66" endline="79">enqueue</referencedby>
        <referencedby refid="redis_8c_1ac9878ee09b53700eb08c1f175873c30b" compoundref="redis_8c" startline="211" endline="245">insert</referencedby>
      </memberdef>
      <memberdef kind="function" id="json__tools_8cpp_1a513edf914a6a6141c7892d193d0c1f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * string_to_struct</definition>
        <argsstring>(const char *json_string, qm_type *type)</argsstring>
        <name>string_to_struct</name>
        <param>
          <type>const char *</type>
          <declname>json_string</declname>
        </param>
        <param>
          <type><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4c" kindref="member">qm_type</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Cast a json string to a struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json_string</parametername>
</parameternamelist>
<parameterdescription>
<para>The string containing the json that represents the struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Will be set to the type of the struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void* This is the actual allocated structure, casted to void </para>
</simplesect>
<simplesect kind="note"><para>To cast the returned param to the structure you probably need to use a switch(type) and cast it to a struct </para>
</simplesect>
<simplesect kind="see"><para><ref refid="common_8h" kindref="compound">common.h</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daemon/daemon_utils/common_utils/json/json_tools.cpp" line="92" column="1" bodyfile="daemon/daemon_utils/common_utils/json/json_tools.cpp" bodystart="92" bodyend="150"/>
        <references refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca78386e426adecb3fd26350119a3cb7c2" compoundref="common_8h" startline="41">BROADCAST</references>
        <references refid="structqm__broad_1a59096b6c11d45cf9addecfb629b55978" compoundref="common_8h" startline="87">qm_broad::data</references>
        <references refid="structqm__shared_1ac6ce7156e06279b3194acb24e4face96" compoundref="common_8h" startline="76">qm_shared::fd</references>
        <references refid="structqm__shared_1afef3f8b7e15af861010c6e0d66de659e" compoundref="common_8h" startline="78">qm_shared::keypart</references>
        <references refid="structqm__user_1aa69546c3a6a2124be9f964329c951a84" compoundref="common_8h" startline="63">qm_user::pid</references>
        <references refid="structqm__user_1ad718cfba201afae89c596111bd508d5f" compoundref="common_8h" startline="65">qm_user::pubkey</references>
        <references refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca84fb91aba870f3033713d9e4b638f006" compoundref="common_8h" startline="42">QM_TYPE_UNDEFINED</references>
        <references refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca9c46e16a4ab019339596acadeefc8c53" compoundref="common_8h" startline="40">SHARED</references>
        <references refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4cae2d30a195cee6b2961cc2c23ea4b520b" compoundref="common_8h" startline="39">USER</references>
        <references refid="structqm__user_1a6c52d68724b65831ba6d95f3d7448ff4" compoundref="common_8h" startline="64">qm_user::user</references>
        <references refid="structqm__user_1a4b5bbaaf885c62f44f265eeba461303d" compoundref="common_8h" startline="62">qm_user::user_op</references>
        <references refid="structqm__shared_1af2a26858d769e4a816d0567b51ce0ed5" compoundref="common_8h" startline="77">qm_shared::userlist</references>
        <referencedby refid="queue_8c_1a1874b6e320d1e54d571c89766d046602" compoundref="queue_8c" startline="94" endline="110">dequeue</referencedby>
        <referencedby refid="redis_8c_1a8e6e1687d6351741ac3e353d23425f71" compoundref="redis_8c" startline="104" endline="114">json_to_qm_user</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>This file provides function to cast either <ref refid="structqm__user" kindref="compound">qm_user</ref>, <ref refid="structqm__shared" kindref="compound">qm_shared</ref> or <ref refid="structqm__broad" kindref="compound">qm_broad</ref> to a json string and vice versa. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>All the functions here are C++ functions, so we could use nlohmann-json library </para>
</simplesect>
<simplesect kind="note"><para>Learn more on <ulink url="https://github.com/nlohmann/json">nlohmann-json</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../../common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../print/print_utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;/usr/include/nlohmann/json.hpp&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>you&apos;re<sp/>using<sp/>nlohmann&apos;s<sp/>JSON<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>malloc<sp/>and<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>strcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="27" refid="json__tools_8cpp_1abe22bc6ace23fc8f7e186a824784765f" refkind="member"><highlight class="normal"><ref refid="json__tools_8cpp_1abe22bc6ace23fc8f7e186a824784765f" kindref="member">struct_to_json</ref><sp/>(<ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4c" kindref="member">qm_type</ref><sp/>qmt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q_mess)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>nlohmann::json<sp/>json_obj;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(qmt)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4cae2d30a195cee6b2961cc2c23ea4b520b" kindref="member">USER</ref>:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structqm__user" kindref="compound">qm_user</ref><sp/>*user<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structqm__user" kindref="compound">qm_user</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(q_mess);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user-&gt;<ref refid="structqm__user_1a4b5bbaaf885c62f44f265eeba461303d" kindref="member">user_op</ref><sp/>==<sp/><ref refid="common_8h_1ad30dd7f5c8fc3f0027bbddc111c652b8aceb7c305772dab23a260960771180df3" kindref="member">REGISTER</ref>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0" kindref="member">print_msg</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Register&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user-&gt;<ref refid="structqm__user_1a4b5bbaaf885c62f44f265eeba461303d" kindref="member">user_op</ref><sp/>==<sp/><ref refid="common_8h_1ad30dd7f5c8fc3f0027bbddc111c652b8ad46a7713a16573956ea43782ac970154" kindref="member">UNREGISTER</ref>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0" kindref="member">print_msg</ref><sp/>(</highlight><highlight class="stringliteral">&quot;Unregister&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_obj[</highlight><highlight class="stringliteral">&quot;user_op&quot;</highlight><highlight class="normal">]<sp/>=<sp/>user-&gt;<ref refid="structqm__user_1a4b5bbaaf885c62f44f265eeba461303d" kindref="member">user_op</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_obj[</highlight><highlight class="stringliteral">&quot;pid&quot;</highlight><highlight class="normal">]<sp/>=<sp/>user-&gt;<ref refid="structqm__user_1aa69546c3a6a2124be9f964329c951a84" kindref="member">pid</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_obj[</highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">]<sp/>=<sp/>user-&gt;<ref refid="structqm__user_1a6c52d68724b65831ba6d95f3d7448ff4" kindref="member">user</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_obj[</highlight><highlight class="stringliteral">&quot;pubkey&quot;</highlight><highlight class="normal">]<sp/>=<sp/>user-&gt;<ref refid="structqm__user_1ad718cfba201afae89c596111bd508d5f" kindref="member">pubkey</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca9c46e16a4ab019339596acadeefc8c53" kindref="member">SHARED</ref>:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structqm__shared" kindref="compound">qm_shared</ref><sp/>*shared<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structqm__shared" kindref="compound">qm_shared</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(q_mess);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_obj[</highlight><highlight class="stringliteral">&quot;fd&quot;</highlight><highlight class="normal">]<sp/>=<sp/>shared-&gt;<ref refid="structqm__shared_1ac6ce7156e06279b3194acb24e4face96" kindref="member">fd</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Converti<sp/>la<sp/>matrice<sp/>di<sp/>stringhe<sp/>in<sp/>un<sp/>array<sp/>di<sp/>stringhe<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlohmann::json<sp/>userlist_array<sp/>=<sp/>nlohmann::json::array<sp/>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>shared-&gt;<ref refid="structqm__shared_1af2a26858d769e4a816d0567b51ce0ed5" kindref="member">userlist</ref>[i]<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>++i)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>userlist_array.push_back<sp/>(shared-&gt;<ref refid="structqm__shared_1af2a26858d769e4a816d0567b51ce0ed5" kindref="member">userlist</ref>[i]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_obj[</highlight><highlight class="stringliteral">&quot;userlist&quot;</highlight><highlight class="normal">]<sp/>=<sp/>userlist_array;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_obj[</highlight><highlight class="stringliteral">&quot;keypart&quot;</highlight><highlight class="normal">]<sp/>=<sp/>shared-&gt;<ref refid="structqm__shared_1afef3f8b7e15af861010c6e0d66de659e" kindref="member">keypart</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca78386e426adecb3fd26350119a3cb7c2" kindref="member">BROADCAST</ref>:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structqm__broad" kindref="compound">qm_broad</ref><sp/>*broad<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structqm__broad" kindref="compound">qm_broad</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(q_mess);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json_obj[</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">]<sp/>=<sp/>broad-&gt;<ref refid="structqm__broad_1a59096b6c11d45cf9addecfb629b55978" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>Json<sp/>obj<sp/>to<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>std::string<sp/>json_str<sp/>=<sp/>json_obj.dump<sp/>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*result<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc<sp/>(json_str.size<sp/>()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy<sp/>(result,<sp/>json_str.c_str<sp/>());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0" kindref="member">print_msg</ref><sp/>(</highlight><highlight class="stringliteral">&quot;JSONIFIED:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="92" refid="json__tools_8cpp_1a513edf914a6a6141c7892d193d0c1f52" refkind="member"><highlight class="normal"><ref refid="json__tools_8cpp_1a513edf914a6a6141c7892d193d0c1f52" kindref="member">string_to_struct</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json_string,<sp/><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4c" kindref="member">qm_type</ref><sp/>*type)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nlohmann::json<sp/>json_obj<sp/>=<sp/>nlohmann::json::parse<sp/>(json_string);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(json_obj.contains<sp/>(</highlight><highlight class="stringliteral">&quot;user_op&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>=<sp/><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4cae2d30a195cee6b2961cc2c23ea4b520b" kindref="member">USER</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structqm__user" kindref="compound">qm_user</ref><sp/>*user</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structqm__user" kindref="compound">qm_user</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(std::malloc<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="structqm__user" kindref="compound">qm_user</ref>)));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user-&gt;<ref refid="structqm__user_1a4b5bbaaf885c62f44f265eeba461303d" kindref="member">user_op</ref><sp/>=<sp/>json_obj[</highlight><highlight class="stringliteral">&quot;user_op&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user-&gt;<ref refid="structqm__user_1aa69546c3a6a2124be9f964329c951a84" kindref="member">pid</ref><sp/>=<sp/>json_obj[</highlight><highlight class="stringliteral">&quot;pid&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user-&gt;<ref refid="structqm__user_1a6c52d68724b65831ba6d95f3d7448ff4" kindref="member">user</ref><sp/>=<sp/>strdup<sp/>(json_obj[</highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">].get&lt;std::string&gt;<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user-&gt;<ref refid="structqm__user_1ad718cfba201afae89c596111bd508d5f" kindref="member">pubkey</ref></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>strdup<sp/>(json_obj[</highlight><highlight class="stringliteral">&quot;pubkey&quot;</highlight><highlight class="normal">].get&lt;std::string&gt;<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>user;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(json_obj.contains<sp/>(</highlight><highlight class="stringliteral">&quot;fd&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>=<sp/><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca9c46e16a4ab019339596acadeefc8c53" kindref="member">SHARED</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structqm__shared" kindref="compound">qm_shared</ref><sp/>*shared</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structqm__shared" kindref="compound">qm_shared</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(std::malloc<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="structqm__shared" kindref="compound">qm_shared</ref>)));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;<ref refid="structqm__shared_1ac6ce7156e06279b3194acb24e4face96" kindref="member">fd</ref><sp/>=<sp/>json_obj[</highlight><highlight class="stringliteral">&quot;fd&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>userlist<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>userlist<sp/>=<sp/>json_obj[</highlight><highlight class="stringliteral">&quot;userlist&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;<ref refid="structqm__shared_1af2a26858d769e4a816d0567b51ce0ed5" kindref="member">userlist</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::malloc<sp/>((userlist.size<sp/>()<sp/>+<sp/>1)<sp/>*<sp/>sizeof<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>userlist.size<sp/>();<sp/>++i)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;<ref refid="structqm__shared_1af2a26858d769e4a816d0567b51ce0ed5" kindref="member">userlist</ref>[i]<sp/>=<sp/>strdup<sp/>(userlist[i].c_str<sp/>());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;<ref refid="structqm__shared_1af2a26858d769e4a816d0567b51ce0ed5" kindref="member">userlist</ref>[userlist.size<sp/>()]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;<ref refid="structqm__shared_1afef3f8b7e15af861010c6e0d66de659e" kindref="member">keypart</ref></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>strdup<sp/>(json_obj[</highlight><highlight class="stringliteral">&quot;keypart&quot;</highlight><highlight class="normal">].get&lt;std::string&gt;<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shared;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(json_obj.contains<sp/>(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>=<sp/><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca78386e426adecb3fd26350119a3cb7c2" kindref="member">BROADCAST</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structqm__broad" kindref="compound">qm_broad</ref><sp/>*broad</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structqm__broad" kindref="compound">qm_broad</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(std::malloc<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="structqm__broad" kindref="compound">qm_broad</ref>)));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>broad-&gt;<ref refid="structqm__broad_1a59096b6c11d45cf9addecfb629b55978" kindref="member">data</ref><sp/>=<sp/>strdup<sp/>(json_obj[</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">].get&lt;std::string&gt;<sp/>().c_str<sp/>());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>broad;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*type<sp/>=<sp/><ref refid="common_8h_1ab2c144fca6129807a9fe4bad66970c4ca84fb91aba870f3033713d9e4b638f006" kindref="member">QM_TYPE_UNDEFINED</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception<sp/>&amp;e)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>JSON:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what<sp/>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="daemon/daemon_utils/common_utils/json/json_tools.cpp"/>
  </compounddef>
</doxygen>
