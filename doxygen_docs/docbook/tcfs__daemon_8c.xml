<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tcfs__daemon_8c" xml:lang="en-US">
<title>daemon/tcfs_daemon.c File Reference</title>
<indexterm><primary>daemon/tcfs_daemon.c</primary></indexterm>
<para>

<para>This is the core of the daemon. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;daemon_utils/daemon_tools/tcfs_daemon_tools.h&quot;<?linebreak?></programlisting>Include dependency graph for tcfs_daemon.c:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tcfs__daemon_8c__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_tcfs__daemon_8c_1a93d1097e4dd3c0735da3da2e89410090">handle_termination</link> (int signum)</para>

<para>Handle the termination if SIGTERM is received. </para>
</listitem>
            <listitem><para>int <link linkend="_tcfs__daemon_8c_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link> ()</para>

<para>main function of the daemon. This will daemonize the program, spawn a thread to handle messages and handle unexpected termination of the thread </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>volatile int <link linkend="_tcfs__daemon_8c_1a679ec79d065ad812032851f6872caee6">terminate</link> = 0</para>

<para>If the spawned threads terminate abruptly they should set this to 1, so that the daemon can terminate. </para>
</listitem>
            <listitem><para>pthread_mutex_t <link linkend="_tcfs__daemon_8c_1af7e1db76e3a69a4b0484910b1f7562da">terminate_mutex</link> = PTHREAD_MUTEX_INITIALIZER</para>

<para>Mutex needed to set the var terminate to 1 safely. </para>
</listitem>
            <listitem><para>const char <link linkend="_tcfs__daemon_8c_1a6376ed00be9fd53f7579e9243f3eacde">MQUEUE</link> [] = &quot;/tcfs_queue&quot;</para>

<para>the queue file location </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This is the core of the daemon. </para>

<para><note><title>Note</title>

<para>Forking is disable at the moment, this meas it will run as a &quot;normal&quot; program </para>

<para>the main function spawns a thread to handle incoming messages on the queue </para>
</note>
<para><link linkend="_todo_1_todo000007">Todo</link> 
<para>: Enable forking </para>

<para>Run the daemon via SystemD </para>
</para></para>
<para>
Definition in file <link linkend="_tcfs__daemon_8c_source">tcfs_daemon.c</link>.</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tcfs__daemon_8c_1a93d1097e4dd3c0735da3da2e89410090"/><section>
    <title>handle_termination()</title>
<indexterm><primary>handle_termination</primary><secondary>tcfs_daemon.c</secondary></indexterm>
<indexterm><primary>tcfs_daemon.c</primary><secondary>handle_termination</secondary></indexterm>
<para><computeroutput>void handle_termination (int signum)</computeroutput></para><para>

<para>Handle the termination if SIGTERM is received. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>signum</entry><entry>
<para>Integer corresponding to SIGNUM </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <para><link linkend="_todo_1_todo000010">Todo</link> 
<para>: Implement remove_queue() to clear and delete the queue </para>
</para></para>
<para>
Definition at line <link linkend="_tcfs__daemon_8c_source_1l00040">40</link> of file <link linkend="_tcfs__daemon_8c_source">tcfs_daemon.c</link>.</para>
<para>
References <link linkend="_print__utils_8c_source_1l00100">print_msg()</link>.</para>
<para>
Referenced by <link linkend="_tcfs__daemon_8c_source_1l00056">main()</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tcfs__daemon_8c_a93d1097e4dd3c0735da3da2e89410090_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tcfs__daemon_8c_a93d1097e4dd3c0735da3da2e89410090_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_tcfs__daemon_8c_1ae66f6b31b5ad750f1fe042a706a4e3d4"/><section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>tcfs_daemon.c</secondary></indexterm>
<indexterm><primary>tcfs_daemon.c</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main ( )</computeroutput></para><para>

<para>main function of the daemon. This will daemonize the program, spawn a thread to handle messages and handle unexpected termination of the thread </para>
</para>

<para><para><link linkend="_todo_1_todo000011">Todo</link> 
<para>: The brief description is basically false advertisement. It only spawn a thread and hangs infinitely </para>

<para>: Remove the thread that spawns handle_outgoing_messages. This must not make it into final release </para>
</para></para>
<para>
Definition at line <link linkend="_tcfs__daemon_8c_source_1l00056">56</link> of file <link linkend="_tcfs__daemon_8c_source">tcfs_daemon.c</link>.</para>
<para>
References <link linkend="_tcfs__daemon__tools_8c_source_1l00019">handle_incoming_messages()</link>, <link linkend="_tcfs__daemon__tools_8c_source_1l00066">handle_outgoing_messages()</link>, <link linkend="_tcfs__daemon_8c_source_1l00040">handle_termination()</link>, <link linkend="_queue_8c_source_1l00027">init_queue()</link>, <link linkend="_tcfs__daemon_8c_source_1l00032">MQUEUE</link>, <link linkend="_print__utils_8c_source_1l00078">print_err()</link>, <link linkend="_print__utils_8c_source_1l00100">print_msg()</link>, and <link linkend="_tcfs__daemon_8c_source_1l00020">terminate</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tcfs__daemon_8c_ae66f6b31b5ad750f1fe042a706a4e3d4_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_tcfs__daemon_8c_1a6376ed00be9fd53f7579e9243f3eacde"/><section>
    <title>MQUEUE</title>
<indexterm><primary>MQUEUE</primary><secondary>tcfs_daemon.c</secondary></indexterm>
<indexterm><primary>tcfs_daemon.c</primary><secondary>MQUEUE</secondary></indexterm>
<para><computeroutput>MQUEUE = &quot;/tcfs_queue&quot;</computeroutput></para><para>

<para>the queue file location </para>
</para>
<para>
Definition at line <link linkend="_tcfs__daemon_8c_source_1l00032">32</link> of file <link linkend="_tcfs__daemon_8c_source">tcfs_daemon.c</link>.</para>
<para>
Referenced by <link linkend="_tcfs__daemon_8c_source_1l00056">main()</link>.</para>
</section>
<anchor xml:id="_tcfs__daemon_8c_1a679ec79d065ad812032851f6872caee6"/><section>
    <title>terminate</title>
<indexterm><primary>terminate</primary><secondary>tcfs_daemon.c</secondary></indexterm>
<indexterm><primary>tcfs_daemon.c</primary><secondary>terminate</secondary></indexterm>
<para><computeroutput>volatile int terminate = 0</computeroutput></para><para>

<para>If the spawned threads terminate abruptly they should set this to 1, so that the daemon can terminate. </para>
</para>

<para><para><link linkend="_todo_1_todo000008">Todo</link> 
<para>: Implement logic to make this work </para>
</para></para>
<para>
Definition at line <link linkend="_tcfs__daemon_8c_source_1l00020">20</link> of file <link linkend="_tcfs__daemon_8c_source">tcfs_daemon.c</link>.</para>
<para>
Referenced by <link linkend="_tcfs__daemon_8c_source_1l00056">main()</link>.</para>
</section>
<anchor xml:id="_tcfs__daemon_8c_1af7e1db76e3a69a4b0484910b1f7562da"/><section>
    <title>terminate_mutex</title>
<indexterm><primary>terminate_mutex</primary><secondary>tcfs_daemon.c</secondary></indexterm>
<indexterm><primary>tcfs_daemon.c</primary><secondary>terminate_mutex</secondary></indexterm>
<para><computeroutput>pthread_mutex_t terminate_mutex = PTHREAD_MUTEX_INITIALIZER</computeroutput></para><para>

<para>Mutex needed to set the var terminate to 1 safely. </para>
</para>

<para><para><link linkend="_todo_1_todo000009">Todo</link> 
<para>: implement logic to make this work </para>
</para></para>
<para>
Definition at line <link linkend="_tcfs__daemon_8c_source_1l00026">26</link> of file <link linkend="_tcfs__daemon_8c_source">tcfs_daemon.c</link>.</para>
</section>
</section>
</section>
