<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_redis_8c_source" xml:lang="en-US">
<title>redis.c</title>
<indexterm><primary>daemon/daemon_utils/common_utils/db/redis.c</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="_redis_8c_source_1l00001"/>00001 
<anchor xml:id="_redis_8c_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&quot;redis.h&quot;</emphasis>
<anchor xml:id="_redis_8c_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&quot;../print/print_utils.h&quot;</emphasis>
<anchor xml:id="_redis_8c_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&quot;../json/json_tools.h&quot;</emphasis>
<anchor xml:id="_redis_8c_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;hiredis/hiredis.h&gt;</emphasis>
<anchor xml:id="_redis_8c_source_1l00012"/>00012 
<anchor xml:id="_redis_8c_source_1l00019"/>00019 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;HOST[]&#32;=&#32;<emphasis role="stringliteral">&quot;127.0.0.1&quot;</emphasis>;
<anchor xml:id="_redis_8c_source_1l00026"/>00026 <emphasis role="preprocessor">#define&#32;PORT&#32;6380</emphasis>
<anchor xml:id="_redis_8c_source_1l00027"/>00027 
<anchor xml:id="_redis_8c_source_1l00033"/>00033 redisContext&#32;*context;
<anchor xml:id="_redis_8c_source_1l00034"/>00034 
<anchor xml:id="_redis_8c_source_1l00040"/>00040 <emphasis role="keywordtype">void</emphasis>&#32;print_all_keys()&#32;{
<anchor xml:id="_redis_8c_source_1l00041"/>00041 &#32;&#32;&#32;&#32;redisReply&#32;*keys_reply&#32;=&#32;(redisReply&#32;*)redisCommand(context,&#32;<emphasis role="stringliteral">&quot;KEYS&#32;*&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(keys_reply)&#32;{
<anchor xml:id="_redis_8c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(keys_reply-&gt;type&#32;==&#32;REDIS_REPLY_ARRAY)&#32;{
<anchor xml:id="_redis_8c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;keys_reply-&gt;elements;&#32;++i)&#32;{
<anchor xml:id="_redis_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;\tKey:&#32;%s&quot;</emphasis>,&#32;keys_reply-&gt;element[i]-&gt;str);
<anchor xml:id="_redis_8c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_redis_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;Error&#32;retrieving&#32;keys:&#32;%s&quot;</emphasis>,&#32;keys_reply-&gt;str);
<anchor xml:id="_redis_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;freeReplyObject(keys_reply);
<anchor xml:id="_redis_8c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_redis_8c_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;Error&#32;executing&#32;KEYS&#32;command&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00054"/>00054 }
<anchor xml:id="_redis_8c_source_1l00060"/>00060 <emphasis role="keywordtype">int</emphasis>&#32;init_context()
<anchor xml:id="_redis_8c_source_1l00061"/>00061 {
<anchor xml:id="_redis_8c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="comment">//Do&#32;not&#32;reinit&#32;the&#32;context</emphasis>
<anchor xml:id="_redis_8c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context&#32;!=&#32;NULL)
<anchor xml:id="_redis_8c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_redis_8c_source_1l00065"/>00065 
<anchor xml:id="_redis_8c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;context&#32;=&#32;redisConnect(HOST,&#32;PORT);
<anchor xml:id="_redis_8c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context-&gt;err)&#32;{
<anchor xml:id="_redis_8c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Connection&#32;error:&#32;%s&quot;</emphasis>,&#32;context-&gt;errstr);
<anchor xml:id="_redis_8c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_redis_8c_source_1l00070"/>00070 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_redis_8c_source_1l00072"/>00072 }
<anchor xml:id="_redis_8c_source_1l00078"/>00078 <emphasis role="keywordtype">void</emphasis>&#32;free_context()
<anchor xml:id="_redis_8c_source_1l00079"/>00079 {
<anchor xml:id="_redis_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;redisFree(context);
<anchor xml:id="_redis_8c_source_1l00081"/>00081 }
<anchor xml:id="_redis_8c_source_1l00088"/>00088 <link linkend="_structqm__user">qm_user</link>&#32;*json_to_qm_user(<emphasis role="keywordtype">char</emphasis>&#32;*json)
<anchor xml:id="_redis_8c_source_1l00089"/>00089 {
<anchor xml:id="_redis_8c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;DEBUG:&#32;Converting&#32;%s&quot;</emphasis>,&#32;json);
<anchor xml:id="_redis_8c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;qm_type&#32;type;
<anchor xml:id="_redis_8c_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="comment">//Redis&#32;return&#32;the&#32;value&#32;as&#32;json:{actual&#32;json}&#32;so&#32;we&#32;need&#32;to&#32;eliminate&#32;the&#32;json:&#32;from&#32;the&#32;string</emphasis>
<anchor xml:id="_redis_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*res&#32;=&#32;strchr(json,&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;res++;&#32;<emphasis role="comment">//Skip&#32;the&#32;:&#32;char</emphasis>
<anchor xml:id="_redis_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<link linkend="_structqm__user">qm_user</link>&#32;*user&#32;=&#32;(<link linkend="_structqm__user">qm_user</link>&#32;*)string_to_struct(res,&#32;&amp;type);
<anchor xml:id="_redis_8c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;user;
<anchor xml:id="_redis_8c_source_1l00097"/>00097 }
<anchor xml:id="_redis_8c_source_1l00104"/>00104 <link linkend="_structqm__user">qm_user</link>&#32;*get_user_by_pid(pid_t&#32;pid)&#32;{
<anchor xml:id="_redis_8c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<link linkend="_structqm__user">qm_user</link>&#32;*user&#32;=&#32;NULL;
<anchor xml:id="_redis_8c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Retrieve&#32;the&#32;JSON&#32;data&#32;from&#32;Redis&#32;hash</emphasis>
<anchor xml:id="_redis_8c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;EXECUTING&#32;\&quot;GET&#32;pid:%d\&quot;&quot;</emphasis>,&#32;pid);
<anchor xml:id="_redis_8c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;redisReply&#32;*luaReply&#32;=&#32;(redisReply&#32;*)redisCommand(context,&#32;<emphasis role="stringliteral">&quot;GET&#32;pid:%d&quot;</emphasis>,&#32;pid);
<anchor xml:id="_redis_8c_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(luaReply)&#32;{
<anchor xml:id="_redis_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(luaReply-&gt;type&#32;==&#32;REDIS_REPLY_STRING)&#32;{
<anchor xml:id="_redis_8c_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;user&#32;=&#32;json_to_qm_user(luaReply-&gt;str);
<anchor xml:id="_redis_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(user)&#32;{
<anchor xml:id="_redis_8c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;Successful&#32;retrieval!&#32;PID:&#32;%d,&#32;User:&#32;%s&quot;</emphasis>,&#32;user-&gt;pid,&#32;user-&gt;user);
<anchor xml:id="_redis_8c_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_redis_8c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;converting&#32;JSON&#32;to&#32;struct&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_redis_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Reply&#32;type&#32;error&#32;%d&#32;-&gt;&#32;executing&#32;HGET\n\tErrString:&#32;%s&quot;</emphasis>,
<anchor xml:id="_redis_8c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;luaReply-&gt;type,&#32;luaReply-&gt;str,context-&gt;errstr);
<anchor xml:id="_redis_8c_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;freeReplyObject(luaReply);
<anchor xml:id="_redis_8c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_redis_8c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Reply&#32;error&#32;executing&#32;HGET\n\tErrString:&#32;%s&quot;</emphasis>,&#32;context-&gt;errstr);
<anchor xml:id="_redis_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;user;
<anchor xml:id="_redis_8c_source_1l00126"/>00126 }
<anchor xml:id="_redis_8c_source_1l00133"/>00133 <link linkend="_structqm__user">qm_user</link>&#32;*get_user_by_name(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name)&#32;{
<anchor xml:id="_redis_8c_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<link linkend="_structqm__user">qm_user</link>&#32;*user&#32;=&#32;NULL;
<anchor xml:id="_redis_8c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Retrieve&#32;the&#32;JSON&#32;data&#32;from&#32;Redis&#32;hash</emphasis>
<anchor xml:id="_redis_8c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;EXECUTING&#32;\&quot;GET&#32;name:%d\&quot;&quot;</emphasis>,&#32;name);
<anchor xml:id="_redis_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;redisReply&#32;*luaReply&#32;=&#32;(redisReply&#32;*)redisCommand(context,&#32;<emphasis role="stringliteral">&quot;GET&#32;name:%d&quot;</emphasis>,&#32;name);
<anchor xml:id="_redis_8c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(luaReply)&#32;{
<anchor xml:id="_redis_8c_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(luaReply-&gt;type&#32;==&#32;REDIS_REPLY_STRING)&#32;{
<anchor xml:id="_redis_8c_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;user&#32;=&#32;json_to_qm_user(luaReply-&gt;str);
<anchor xml:id="_redis_8c_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(user)&#32;{
<anchor xml:id="_redis_8c_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;Successful&#32;retrieval!&#32;PID:&#32;%d,&#32;User:&#32;%s&quot;</emphasis>,&#32;user-&gt;pid,&#32;user-&gt;user);
<anchor xml:id="_redis_8c_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_redis_8c_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;converting&#32;JSON&#32;to&#32;struct&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_redis_8c_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Reply&#32;type&#32;error&#32;%d&#32;-&gt;&#32;executing&#32;HGET\n\tErrString:&#32;%s&quot;</emphasis>,
<anchor xml:id="_redis_8c_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;luaReply-&gt;type,&#32;luaReply-&gt;str,context-&gt;errstr);
<anchor xml:id="_redis_8c_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;freeReplyObject(luaReply);
<anchor xml:id="_redis_8c_source_1l00151"/>00151 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_redis_8c_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Reply&#32;error&#32;executing&#32;HGET\n\tErrString:&#32;%s&quot;</emphasis>,&#32;context-&gt;errstr);
<anchor xml:id="_redis_8c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;user;
<anchor xml:id="_redis_8c_source_1l00155"/>00155 }
<anchor xml:id="_redis_8c_source_1l00164"/>00164 <emphasis role="keywordtype">int</emphasis>&#32;insert(<link linkend="_structqm__user">qm_user</link>&#32;*user)
<anchor xml:id="_redis_8c_source_1l00165"/>00165 {
<anchor xml:id="_redis_8c_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;the&#32;structure&#32;to&#32;JSON</emphasis>
<anchor xml:id="_redis_8c_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*json&#32;=&#32;struct_to_json(USER,&#32;user);
<anchor xml:id="_redis_8c_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!json)
<anchor xml:id="_redis_8c_source_1l00169"/>00169 &#32;&#32;&#32;&#32;{
<anchor xml:id="_redis_8c_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;converting&#32;qm_user&#32;to&#32;JSON&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_redis_8c_source_1l00172"/>00172 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00173"/>00173 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Save&#32;to&#32;Redis&#32;with&#32;key&#32;&quot;pid_str&quot;</emphasis>
<anchor xml:id="_redis_8c_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;\tDB:&#32;\&quot;SET&#32;pid:%d&#32;json:%s\&quot;&quot;</emphasis>,&#32;user-&gt;pid,&#32;json);
<anchor xml:id="_redis_8c_source_1l00175"/>00175 &#32;&#32;&#32;&#32;redisReply&#32;*reply_pid&#32;=(redisReply&#32;*)&#32;redisCommand(context,&#32;<emphasis role="stringliteral">&quot;SET&#32;pid:%d&#32;json:%s&quot;</emphasis>,&#32;user-&gt;pid,&#32;json);
<anchor xml:id="_redis_8c_source_1l00176"/>00176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!reply_pid)
<anchor xml:id="_redis_8c_source_1l00177"/>00177 &#32;&#32;&#32;&#32;{
<anchor xml:id="_redis_8c_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;saving&#32;to&#32;Redis&#32;(pid)&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free((<emphasis role="keywordtype">void</emphasis>&#32;*)json);
<anchor xml:id="_redis_8c_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_redis_8c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;freeReplyObject(reply_pid);
<anchor xml:id="_redis_8c_source_1l00183"/>00183 
<anchor xml:id="_redis_8c_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Save&#32;to&#32;Redis&#32;with&#32;key&#32;&quot;user&quot;</emphasis>
<anchor xml:id="_redis_8c_source_1l00185"/>00185 &#32;&#32;&#32;&#32;redisReply&#32;*reply_user&#32;=(redisReply&#32;*)&#32;redisCommand(context,&#32;<emphasis role="stringliteral">&quot;SET&#32;user:%s&#32;json:%s&quot;</emphasis>,&#32;user-&gt;user,&#32;json);
<anchor xml:id="_redis_8c_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!reply_user)
<anchor xml:id="_redis_8c_source_1l00187"/>00187 &#32;&#32;&#32;&#32;{
<anchor xml:id="_redis_8c_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;saving&#32;to&#32;Redis&#32;(user)&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free((<emphasis role="keywordtype">void</emphasis>&#32;*)json);
<anchor xml:id="_redis_8c_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_redis_8c_source_1l00191"/>00191 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00192"/>00192 &#32;&#32;&#32;&#32;freeReplyObject(reply_user);
<anchor xml:id="_redis_8c_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;the&#32;allocated&#32;JSON&#32;memory</emphasis>
<anchor xml:id="_redis_8c_source_1l00194"/>00194 &#32;&#32;&#32;&#32;free((<emphasis role="keywordtype">void</emphasis>&#32;*)json);&#32;<emphasis role="comment">//Discard&#32;qualifier</emphasis>
<anchor xml:id="_redis_8c_source_1l00195"/>00195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_redis_8c_source_1l00196"/>00196 }
<anchor xml:id="_redis_8c_source_1l00205"/>00205 <emphasis role="keywordtype">int</emphasis>&#32;remove_by_pid(pid_t&#32;pid)
<anchor xml:id="_redis_8c_source_1l00206"/>00206 {
<anchor xml:id="_redis_8c_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<link linkend="_structqm__user">qm_user</link>&#32;*user_tmp&#32;=&#32;get_user_by_pid(pid);
<anchor xml:id="_redis_8c_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;the&#32;structure&#32;by&#32;PID</emphasis>
<anchor xml:id="_redis_8c_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;\tDB:&#32;\&quot;DEL&#32;pid:%d\&quot;&quot;</emphasis>,&#32;pid);
<anchor xml:id="_redis_8c_source_1l00210"/>00210 &#32;&#32;&#32;&#32;redisReply&#32;*reply_pid&#32;=(redisReply&#32;*)&#32;redisCommand(context,&#32;<emphasis role="stringliteral">&quot;DEL&#32;pid:%d&quot;</emphasis>,&#32;pid);
<anchor xml:id="_redis_8c_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!reply_pid)&#32;{
<anchor xml:id="_redis_8c_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;removing&#32;structure&#32;by&#32;PID&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_redis_8c_source_1l00214"/>00214 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00215"/>00215 &#32;&#32;&#32;&#32;freeReplyObject(reply_pid);
<anchor xml:id="_redis_8c_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Also&#32;remove&#32;the&#32;corresponding&#32;key&#32;by&#32;name</emphasis>
<anchor xml:id="_redis_8c_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>(<emphasis role="stringliteral">&quot;\tDB:&#32;\&quot;DEL&#32;user:%s\&quot;&quot;</emphasis>,&#32;user_tmp-&gt;user);
<anchor xml:id="_redis_8c_source_1l00218"/>00218 &#32;&#32;&#32;&#32;redisReply&#32;*reply_name&#32;=(redisReply&#32;*)&#32;redisCommand(context,&#32;<emphasis role="stringliteral">&quot;DEL&#32;user:%s&quot;</emphasis>,&#32;user_tmp-&gt;user);
<anchor xml:id="_redis_8c_source_1l00219"/>00219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!reply_name)&#32;{
<anchor xml:id="_redis_8c_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;removing&#32;key&#32;by&#32;name&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_redis_8c_source_1l00222"/>00222 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00223"/>00223 &#32;&#32;&#32;&#32;free(user_tmp);
<anchor xml:id="_redis_8c_source_1l00224"/>00224 &#32;&#32;&#32;&#32;freeReplyObject(reply_name);
<anchor xml:id="_redis_8c_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_redis_8c_source_1l00226"/>00226 }
<anchor xml:id="_redis_8c_source_1l00235"/>00235 <emphasis role="keywordtype">int</emphasis>&#32;remove_by_user(<emphasis role="keywordtype">char</emphasis>&#32;*name)
<anchor xml:id="_redis_8c_source_1l00236"/>00236 {
<anchor xml:id="_redis_8c_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<link linkend="_structqm__user">qm_user</link>&#32;*user_tmp&#32;=&#32;get_user_by_name(name);
<anchor xml:id="_redis_8c_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;the&#32;structure&#32;by&#32;name</emphasis>
<anchor xml:id="_redis_8c_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;key_name[64];&#32;<emphasis role="comment">//&#32;Adjust&#32;the&#32;size&#32;as&#32;needed</emphasis>
<anchor xml:id="_redis_8c_source_1l00240"/>00240 &#32;&#32;&#32;&#32;snprintf(key_name,&#32;<emphasis role="keyword">sizeof</emphasis>(key_name),&#32;<emphasis role="stringliteral">&quot;user:%s&quot;</emphasis>,&#32;name);
<anchor xml:id="_redis_8c_source_1l00241"/>00241 &#32;&#32;&#32;&#32;redisReply&#32;*reply_name&#32;=(redisReply&#32;*)&#32;redisCommand(context,&#32;<emphasis role="stringliteral">&quot;DEL&#32;%s&quot;</emphasis>,&#32;key_name);
<anchor xml:id="_redis_8c_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!reply_name)&#32;{
<anchor xml:id="_redis_8c_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;removing&#32;structure&#32;by&#32;name&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_redis_8c_source_1l00245"/>00245 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00246"/>00246 &#32;&#32;&#32;&#32;freeReplyObject(reply_name);
<anchor xml:id="_redis_8c_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Also&#32;remove&#32;the&#32;corresponding&#32;key&#32;by&#32;PID</emphasis>
<anchor xml:id="_redis_8c_source_1l00248"/>00248 &#32;&#32;&#32;&#32;redisReply&#32;*reply_pid&#32;=(redisReply&#32;*)&#32;redisCommand(context,&#32;<emphasis role="stringliteral">&quot;DEL&#32;%d&quot;</emphasis>,&#32;user_tmp-&gt;pid);
<anchor xml:id="_redis_8c_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!reply_pid)&#32;{
<anchor xml:id="_redis_8c_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>(<emphasis role="stringliteral">&quot;Error&#32;removing&#32;key&#32;by&#32;PID&quot;</emphasis>);
<anchor xml:id="_redis_8c_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_redis_8c_source_1l00252"/>00252 &#32;&#32;&#32;&#32;}
<anchor xml:id="_redis_8c_source_1l00253"/>00253 &#32;&#32;&#32;&#32;freeReplyObject(reply_pid);
<anchor xml:id="_redis_8c_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_redis_8c_source_1l00255"/>00255 }
</programlisting></section>
