<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_queue_8c_source" xml:lang="en-US">
<title>queue.c</title>
<indexterm><primary>daemon/daemon_utils/queue/queue.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_queue_8c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;queue.h&quot;</emphasis>
<anchor xml:id="_queue_8c_source_1l00002"/>00002 
<anchor xml:id="_queue_8c_source_1l00013"/>00013 <emphasis role="preprocessor">#define&#32;MESSAGE_BUFFER_SIZE&#32;256</emphasis>
<anchor xml:id="_queue_8c_source_1l00018"/>00018 <emphasis role="preprocessor">#define&#32;MQUEUE_N&#32;256;</emphasis>
<anchor xml:id="_queue_8c_source_1l00019"/>00019 
<anchor xml:id="_queue_8c_source_1l00026"/>00026 mqd_t
<anchor xml:id="_queue_8c_source_1l00027"/><link linkend="_queue_8c_1a6997b2cacf3d2e49bc848d0274e24b13">00027</link> <link linkend="_queue_8c_1a6997b2cacf3d2e49bc848d0274e24b13">init_queue</link>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*queue)
<anchor xml:id="_queue_8c_source_1l00028"/>00028 {
<anchor xml:id="_queue_8c_source_1l00029"/>00029 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>mq_attr&#32;attr;
<anchor xml:id="_queue_8c_source_1l00030"/>00030 &#32;&#32;mqd_t&#32;mq;
<anchor xml:id="_queue_8c_source_1l00031"/>00031 
<anchor xml:id="_queue_8c_source_1l00032"/>00032 &#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;queue&#32;attributes</emphasis>
<anchor xml:id="_queue_8c_source_1l00033"/>00033 &#32;&#32;attr.mq_flags&#32;=&#32;0;
<anchor xml:id="_queue_8c_source_1l00034"/>00034 &#32;&#32;attr.mq_maxmsg&#32;=&#32;MAX_QM_N;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Maximum&#32;number&#32;of&#32;messages&#32;in&#32;the&#32;queue</emphasis>
<anchor xml:id="_queue_8c_source_1l00035"/>00035 &#32;&#32;attr.mq_msgsize&#32;=&#32;MAX_QM_SIZE;&#32;<emphasis role="comment">//&#32;Maximum&#32;size&#32;of&#32;a&#32;single&#32;message</emphasis>
<anchor xml:id="_queue_8c_source_1l00036"/>00036 &#32;&#32;attr.mq_curmsgs&#32;=&#32;0;
<anchor xml:id="_queue_8c_source_1l00037"/>00037 
<anchor xml:id="_queue_8c_source_1l00038"/>00038 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;the&#32;message&#32;queue</emphasis>
<anchor xml:id="_queue_8c_source_1l00039"/>00039 &#32;&#32;mq&#32;=&#32;mq_open&#32;(queue,&#32;O_CREAT&#32;|&#32;O_RDWR&#32;<emphasis role="comment">/*|&#32;O_RDONLY&#32;|&#32;O_NONBLOCK*/</emphasis>,&#32;0777,
<anchor xml:id="_queue_8c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;attr);&#32;<emphasis role="comment">//&#32;TODO:&#32;Better&#32;define&#32;permissions</emphasis>
<anchor xml:id="_queue_8c_source_1l00041"/>00041 &#32;&#32;printf&#32;(<emphasis role="stringliteral">&quot;mqopen&#32;%d\n&quot;</emphasis>,&#32;mq);
<anchor xml:id="_queue_8c_source_1l00042"/>00042 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mq&#32;==&#32;(mqd_t)-1)
<anchor xml:id="_queue_8c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;{
<anchor xml:id="_queue_8c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>&#32;(<emphasis role="stringliteral">&quot;mq_open&#32;cannot&#32;create&#32;que&#32;in&#32;%s&#32;%d&#32;%s&quot;</emphasis>,&#32;queue,&#32;errno,
<anchor xml:id="_queue_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strerror&#32;(errno));
<anchor xml:id="_queue_8c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>&#32;(<emphasis role="stringliteral">&quot;mq_open&#32;cannot&#32;create&#32;que&#32;in&#32;%s&#32;%d&#32;%s&quot;</emphasis>,&#32;queue,&#32;errno,
<anchor xml:id="_queue_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strerror&#32;(errno));
<anchor xml:id="_queue_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_queue_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;}
<anchor xml:id="_queue_8c_source_1l00050"/>00050 &#32;&#32;printf&#32;(<emphasis role="stringliteral">&quot;Message&#32;queue&#32;created&#32;successfully&#32;at&#32;%s!\n&quot;</emphasis>,&#32;queue);
<anchor xml:id="_queue_8c_source_1l00051"/>00051 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mq;
<anchor xml:id="_queue_8c_source_1l00052"/>00052 }
<anchor xml:id="_queue_8c_source_1l00053"/>00053 
<anchor xml:id="_queue_8c_source_1l00066"/>00066 <emphasis role="keywordtype">int</emphasis>
<anchor xml:id="_queue_8c_source_1l00067"/><link linkend="_queue_8c_1ac51f5d595a9d7376eb0448116c99e1f4">00067</link> <link linkend="_queue_8c_1ac51f5d595a9d7376eb0448116c99e1f4">enqueue</link>&#32;(mqd_t&#32;queue_d,&#32;qm_type&#32;qmt,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*q_mess)
<anchor xml:id="_queue_8c_source_1l00068"/>00068 {
<anchor xml:id="_queue_8c_source_1l00069"/>00069 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*qm_json&#32;=&#32;struct_to_json&#32;(qmt,&#32;q_mess);
<anchor xml:id="_queue_8c_source_1l00070"/>00070 
<anchor xml:id="_queue_8c_source_1l00071"/>00071 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mq_send&#32;(queue_d,&#32;qm_json,&#32;strlen&#32;(qm_json)&#32;+&#32;1,&#32;0)&#32;==&#32;-1)
<anchor xml:id="_queue_8c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;{
<anchor xml:id="_queue_8c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>&#32;(<emphasis role="stringliteral">&quot;mq_send&#32;%s&quot;</emphasis>,&#32;qm_json);
<anchor xml:id="_queue_8c_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;free&#32;((<emphasis role="keywordtype">void</emphasis>&#32;*)qm_json);
<anchor xml:id="_queue_8c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_queue_8c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;}
<anchor xml:id="_queue_8c_source_1l00077"/>00077 &#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>&#32;(<emphasis role="stringliteral">&quot;Message&#32;sent&#32;successfully!\n&quot;</emphasis>);
<anchor xml:id="_queue_8c_source_1l00078"/>00078 &#32;&#32;free&#32;((<emphasis role="keywordtype">void</emphasis>&#32;*)qm_json);
<anchor xml:id="_queue_8c_source_1l00079"/>00079 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_queue_8c_source_1l00080"/>00080 }
<anchor xml:id="_queue_8c_source_1l00081"/>00081 
<anchor xml:id="_queue_8c_source_1l00094"/>00094 <emphasis role="keywordtype">void</emphasis>&#32;*
<anchor xml:id="_queue_8c_source_1l00095"/><link linkend="_queue_8c_1a1874b6e320d1e54d571c89766d046602">00095</link> <link linkend="_queue_8c_1a1874b6e320d1e54d571c89766d046602">dequeue</link>&#32;(mqd_t&#32;queue_d,&#32;qm_type&#32;*qmt)
<anchor xml:id="_queue_8c_source_1l00096"/>00096 {
<anchor xml:id="_queue_8c_source_1l00097"/>00097 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*qm_json&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)malloc&#32;(<emphasis role="keyword">sizeof</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>)&#32;*&#32;MAX_QM_SIZE);
<anchor xml:id="_queue_8c_source_1l00098"/>00098 
<anchor xml:id="_queue_8c_source_1l00099"/>00099 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mq_receive&#32;(queue_d,&#32;qm_json,&#32;MAX_QM_SIZE,&#32;0)&#32;==&#32;-1)
<anchor xml:id="_queue_8c_source_1l00100"/>00100 &#32;&#32;&#32;&#32;{
<anchor xml:id="_queue_8c_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;free&#32;((<emphasis role="keywordtype">void</emphasis>&#32;*)qm_json);
<anchor xml:id="_queue_8c_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__utils_8c_1a650ab060ffe5dbc6c1a968a9cae3bded">print_err</link>&#32;(<emphasis role="stringliteral">&quot;mq_rec&#32;%d&#32;%s&quot;</emphasis>,&#32;errno,&#32;strerror&#32;(errno));
<anchor xml:id="_queue_8c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_queue_8c_source_1l00104"/>00104 &#32;&#32;&#32;&#32;}
<anchor xml:id="_queue_8c_source_1l00105"/>00105 
<anchor xml:id="_queue_8c_source_1l00106"/>00106 &#32;&#32;<link linkend="_print__utils_8c_1a491dc14c94ed8cf706bb54880c50b2d0">print_msg</link>&#32;(<emphasis role="stringliteral">&quot;Dequeued&#32;%s&quot;</emphasis>,&#32;qm_json);
<anchor xml:id="_queue_8c_source_1l00107"/>00107 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*tmp_struct&#32;=&#32;string_to_struct&#32;(qm_json,&#32;qmt);
<anchor xml:id="_queue_8c_source_1l00108"/>00108 
<anchor xml:id="_queue_8c_source_1l00109"/>00109 &#32;&#32;free&#32;((<emphasis role="keywordtype">void</emphasis>&#32;*)qm_json);
<anchor xml:id="_queue_8c_source_1l00110"/>00110 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tmp_struct;
<anchor xml:id="_queue_8c_source_1l00111"/>00111 }
</programlisting></section>
