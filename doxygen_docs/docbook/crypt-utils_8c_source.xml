<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_crypt-utils_8c_source" xml:lang="en-US">
<title>crypt-utils.c</title>
<indexterm><primary>userspace-module/utils/crypt-utils/crypt-utils.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_crypt-utils_8c_source_1l00001"/>00001 <emphasis role="comment">/***</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00002"/>00002 <emphasis role="comment"></emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00003"/>00003 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00004"/>00004 <emphasis role="comment">&#32;**/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_crypt-utils_8h">crypt-utils.h</link>&quot;</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00006"/>00006 
<anchor xml:id="_crypt-utils_8c_source_1l00012"/><link linkend="_crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630">00012</link> <emphasis role="preprocessor">#define&#32;BLOCKSIZE&#32;1024</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00019"/><link linkend="_crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84">00019</link> <emphasis role="preprocessor">#define&#32;IV_SIZE&#32;32</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00025"/><link linkend="_crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1">00025</link> <emphasis role="preprocessor">#define&#32;KEY_SIZE&#32;32</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00026"/>00026 
<anchor xml:id="_crypt-utils_8c_source_1l00053"/>00053 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00054"/><link linkend="_crypt-utils_8c_1a94b5b388b3f00982ccee72b192077e76">00054</link> <link linkend="_crypt-utils_8c_1a94b5b388b3f00982ccee72b192077e76">do_crypt</link>&#32;(FILE&#32;*in,&#32;FILE&#32;*out,&#32;<emphasis role="keywordtype">int</emphasis>&#32;action,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*key_str)
<anchor xml:id="_crypt-utils_8c_source_1l00055"/>00055 {
<anchor xml:id="_crypt-utils_8c_source_1l00056"/>00056 &#32;&#32;<emphasis role="comment">/*&#32;Local&#32;Vars&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00057"/>00057 
<anchor xml:id="_crypt-utils_8c_source_1l00058"/>00058 &#32;&#32;<emphasis role="comment">/*&#32;Buffers&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00059"/>00059 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;inbuf[<link linkend="_crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630">BLOCKSIZE</link>];
<anchor xml:id="_crypt-utils_8c_source_1l00060"/>00060 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;inlen;
<anchor xml:id="_crypt-utils_8c_source_1l00061"/>00061 &#32;&#32;<emphasis role="comment">/*&#32;Allow&#32;enough&#32;space&#32;in&#32;output&#32;buffer&#32;for&#32;additional&#32;cipher&#32;block&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00062"/>00062 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;outbuf[<link linkend="_crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630">BLOCKSIZE</link>&#32;+&#32;EVP_MAX_BLOCK_LENGTH];
<anchor xml:id="_crypt-utils_8c_source_1l00063"/>00063 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;outlen;
<anchor xml:id="_crypt-utils_8c_source_1l00064"/>00064 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;writelen;
<anchor xml:id="_crypt-utils_8c_source_1l00065"/>00065 
<anchor xml:id="_crypt-utils_8c_source_1l00066"/>00066 &#32;&#32;<emphasis role="comment">/*&#32;OpenSSL&#32;libcrypto&#32;vars&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00067"/>00067 &#32;&#32;EVP_CIPHER_CTX&#32;*ctx;
<anchor xml:id="_crypt-utils_8c_source_1l00068"/>00068 &#32;&#32;ctx&#32;=&#32;EVP_CIPHER_CTX_new&#32;();
<anchor xml:id="_crypt-utils_8c_source_1l00069"/>00069 
<anchor xml:id="_crypt-utils_8c_source_1l00070"/>00070 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;key[<link linkend="_crypt-utils_8c_1a2d996237e082b78b41771b5aa1a6eae1">KEY_SIZE</link>];
<anchor xml:id="_crypt-utils_8c_source_1l00071"/>00071 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;iv[<link linkend="_crypt-utils_8c_1ad7bb30dbf5882fdf05331918e8a0cc84">IV_SIZE</link>];
<anchor xml:id="_crypt-utils_8c_source_1l00072"/>00072 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nrounds&#32;=&#32;5;
<anchor xml:id="_crypt-utils_8c_source_1l00073"/>00073 
<anchor xml:id="_crypt-utils_8c_source_1l00074"/>00074 &#32;&#32;<emphasis role="comment">/*&#32;tmp&#32;vars&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00075"/>00075 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
<anchor xml:id="_crypt-utils_8c_source_1l00076"/>00076 &#32;&#32;<emphasis role="comment">/*&#32;Setup&#32;Encryption&#32;Key&#32;and&#32;Cipher&#32;Engine&#32;if&#32;in&#32;cipher&#32;mode&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00077"/>00077 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(action&#32;&gt;=&#32;0)
<anchor xml:id="_crypt-utils_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!key_str)
<anchor xml:id="_crypt-utils_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stderr,&#32;<emphasis role="stringliteral">&quot;Key_str&#32;must&#32;not&#32;be&#32;NULL\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Build&#32;Key&#32;from&#32;String&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;EVP_BytesToKey&#32;(EVP_aes_256_cbc&#32;(),&#32;EVP_sha1&#32;(),&#32;NULL,&#32;key_str,
<anchor xml:id="_crypt-utils_8c_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">int</emphasis>)strlen&#32;((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)key_str),&#32;nrounds,&#32;key,
<anchor xml:id="_crypt-utils_8c_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iv);
<anchor xml:id="_crypt-utils_8c_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;32)
<anchor xml:id="_crypt-utils_8c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stderr,&#32;<emphasis role="stringliteral">&quot;Key&#32;size&#32;is&#32;%d&#32;bits&#32;-&#32;should&#32;be&#32;256&#32;bits\n&quot;</emphasis>,
<anchor xml:id="_crypt-utils_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;*&#32;8);
<anchor xml:id="_crypt-utils_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Init&#32;Engine&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_init&#32;(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;EVP_CipherInit_ex&#32;(ctx,&#32;EVP_aes_256_cbc&#32;(),&#32;NULL,&#32;key,&#32;iv,&#32;action);
<anchor xml:id="_crypt-utils_8c_source_1l00099"/>00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00100"/>00100 
<anchor xml:id="_crypt-utils_8c_source_1l00101"/>00101 &#32;&#32;<emphasis role="comment">/*&#32;Loop&#32;through&#32;Input&#32;File*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00102"/>00102 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
<anchor xml:id="_crypt-utils_8c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;Block&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;inlen&#32;=&#32;fread&#32;(inbuf,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(*inbuf),&#32;<link linkend="_crypt-utils_8c_1afcf795f5a96fd55561abe69f56224630">BLOCKSIZE</link>,&#32;in);
<anchor xml:id="_crypt-utils_8c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inlen&#32;&lt;=&#32;0)
<anchor xml:id="_crypt-utils_8c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;EOF&#32;-&gt;&#32;Break&#32;Loop&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00111"/>00111 
<anchor xml:id="_crypt-utils_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;If&#32;in&#32;cipher&#32;mode,&#32;perform&#32;cipher&#32;transform&#32;on&#32;block&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(action&#32;&gt;=&#32;0)
<anchor xml:id="_crypt-utils_8c_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!EVP_CipherUpdate&#32;(ctx,&#32;outbuf,&#32;&amp;outlen,&#32;inbuf,&#32;inlen))
<anchor xml:id="_crypt-utils_8c_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_cleanup&#32;(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;If&#32;in&#32;pass-through&#32;mode.&#32;copy&#32;block&#32;as&#32;is&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy&#32;(outbuf,&#32;inbuf,&#32;inlen);
<anchor xml:id="_crypt-utils_8c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlen&#32;=&#32;inlen;
<anchor xml:id="_crypt-utils_8c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00128"/>00128 
<anchor xml:id="_crypt-utils_8c_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Write&#32;Block&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;writelen&#32;=&#32;fwrite&#32;(outbuf,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(*outbuf),&#32;outlen,&#32;out);
<anchor xml:id="_crypt-utils_8c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(writelen&#32;!=&#32;outlen)
<anchor xml:id="_crypt-utils_8c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perror&#32;(<emphasis role="stringliteral">&quot;fwrite&#32;error&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_cleanup&#32;(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00139"/>00139 
<anchor xml:id="_crypt-utils_8c_source_1l00140"/>00140 &#32;&#32;<emphasis role="comment">/*&#32;If&#32;in&#32;cipher&#32;mode,&#32;handle&#32;necessary&#32;padding&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00141"/>00141 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(action&#32;&gt;=&#32;0)
<anchor xml:id="_crypt-utils_8c_source_1l00142"/>00142 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Handle&#32;remaining&#32;cipher&#32;block&#32;+&#32;padding&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!EVP_CipherFinal_ex&#32;(ctx,&#32;outbuf,&#32;&amp;outlen))
<anchor xml:id="_crypt-utils_8c_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_cleanup&#32;(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Write&#32;remainign&#32;cipher&#32;block&#32;+&#32;padding*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;fwrite&#32;(outbuf,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(*inbuf),&#32;outlen,&#32;out);
<anchor xml:id="_crypt-utils_8c_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_cleanup&#32;(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00154"/>00154 
<anchor xml:id="_crypt-utils_8c_source_1l00155"/>00155 &#32;&#32;<emphasis role="comment">/*&#32;Success&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00156"/>00156 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_crypt-utils_8c_source_1l00157"/>00157 }
<anchor xml:id="_crypt-utils_8c_source_1l00158"/>00158 
<anchor xml:id="_crypt-utils_8c_source_1l00168"/>00168 <emphasis role="keywordtype">int</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00169"/><link linkend="_crypt-utils_8c_1aa377df016f593aa771013264acc9b86b">00169</link> <link linkend="_crypt-utils_8c_1aa377df016f593aa771013264acc9b86b">check_entropy</link>&#32;(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_crypt-utils_8c_source_1l00170"/>00170 {
<anchor xml:id="_crypt-utils_8c_source_1l00171"/>00171 &#32;&#32;FILE&#32;*entropy_file&#32;=&#32;fopen&#32;(<emphasis role="stringliteral">&quot;/proc/sys/kernel/random/entropy_avail&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00172"/>00172 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(entropy_file&#32;==&#32;NULL)
<anchor xml:id="_crypt-utils_8c_source_1l00173"/>00173 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;perror&#32;(<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;open&#32;entropy&#32;file&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_crypt-utils_8c_source_1l00176"/>00176 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00177"/>00177 
<anchor xml:id="_crypt-utils_8c_source_1l00178"/>00178 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;entropy_value;
<anchor xml:id="_crypt-utils_8c_source_1l00179"/>00179 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fscanf&#32;(entropy_file,&#32;<emphasis role="stringliteral">&quot;%d&quot;</emphasis>,&#32;&amp;entropy_value)&#32;!=&#32;1)
<anchor xml:id="_crypt-utils_8c_source_1l00180"/>00180 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;perror&#32;(<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;estimate&#32;entropy&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;fclose&#32;(entropy_file);
<anchor xml:id="_crypt-utils_8c_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_crypt-utils_8c_source_1l00184"/>00184 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00185"/>00185 
<anchor xml:id="_crypt-utils_8c_source_1l00186"/>00186 &#32;&#32;fclose&#32;(entropy_file);
<anchor xml:id="_crypt-utils_8c_source_1l00187"/>00187 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;entropy_value;
<anchor xml:id="_crypt-utils_8c_source_1l00188"/>00188 }
<anchor xml:id="_crypt-utils_8c_source_1l00189"/>00189 
<anchor xml:id="_crypt-utils_8c_source_1l00198"/>00198 <emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00199"/><link linkend="_crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4">00199</link> <link linkend="_crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4">add_entropy</link>&#32;(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_crypt-utils_8c_source_1l00200"/>00200 {
<anchor xml:id="_crypt-utils_8c_source_1l00201"/>00201 &#32;&#32;FILE&#32;*urandom&#32;=&#32;fopen&#32;(<emphasis role="stringliteral">&quot;/dev/urandom&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;rb&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00202"/>00202 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(urandom&#32;==&#32;NULL)
<anchor xml:id="_crypt-utils_8c_source_1l00203"/>00203 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;perror&#32;(<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;open&#32;/dev/urandom&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;exit&#32;(EXIT_FAILURE);
<anchor xml:id="_crypt-utils_8c_source_1l00206"/>00206 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00207"/>00207 
<anchor xml:id="_crypt-utils_8c_source_1l00208"/>00208 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;random_data[32];
<anchor xml:id="_crypt-utils_8c_source_1l00209"/>00209 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(random_data,&#32;1,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(random_data),&#32;urandom);
<anchor xml:id="_crypt-utils_8c_source_1l00210"/>00210 &#32;&#32;fclose&#32;(urandom);
<anchor xml:id="_crypt-utils_8c_source_1l00211"/>00211 
<anchor xml:id="_crypt-utils_8c_source_1l00212"/>00212 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(random_data))
<anchor xml:id="_crypt-utils_8c_source_1l00213"/>00213 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stderr,&#32;<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;read&#32;data\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;exit&#32;(EXIT_FAILURE);
<anchor xml:id="_crypt-utils_8c_source_1l00216"/>00216 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00217"/>00217 
<anchor xml:id="_crypt-utils_8c_source_1l00218"/>00218 &#32;&#32;<emphasis role="comment">//&#32;Usa&#32;i&#32;dati&#32;casuali&#32;per&#32;aggiungere&#32;entropia</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00219"/>00219 &#32;&#32;RAND_add&#32;(random_data,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(random_data),
<anchor xml:id="_crypt-utils_8c_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.5);&#32;<emphasis role="comment">//&#32;0.5&#32;è&#32;un&#32;peso&#32;arbitrario</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00221"/>00221 
<anchor xml:id="_crypt-utils_8c_source_1l00222"/>00222 &#32;&#32;fprintf&#32;(stdout,&#32;<emphasis role="stringliteral">&quot;Entropy&#32;added&#32;successfully!\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00223"/>00223 }
<anchor xml:id="_crypt-utils_8c_source_1l00224"/>00224 
<anchor xml:id="_crypt-utils_8c_source_1l00231"/>00231 <emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00232"/><link linkend="_crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f">00232</link> <link linkend="_crypt-utils_8c_1a8845f5705eaafda836aac91d5881876f">generate_key</link>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*destination)
<anchor xml:id="_crypt-utils_8c_source_1l00233"/>00233 {
<anchor xml:id="_crypt-utils_8c_source_1l00234"/>00234 &#32;&#32;fprintf&#32;(stdout,&#32;<emphasis role="stringliteral">&quot;Generating&#32;a&#32;new&#32;key...\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00235"/>00235 
<anchor xml:id="_crypt-utils_8c_source_1l00236"/>00236 &#32;&#32;<emphasis role="comment">//&#32;Why?&#32;Because&#32;if&#32;we&#32;try&#32;to&#32;create&#32;a&#32;large&#32;number&#32;of&#32;files&#32;there&#32;might&#32;not</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00237"/>00237 &#32;&#32;<emphasis role="comment">//&#32;be&#32;enough&#32;random&#32;bytes&#32;in&#32;the&#32;system&#32;to&#32;generate&#32;a&#32;key</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00238"/>00238 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;10;&#32;i++)
<anchor xml:id="_crypt-utils_8c_source_1l00239"/>00239 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;entropy&#32;=&#32;<link linkend="_crypt-utils_8c_1aa377df016f593aa771013264acc9b86b">check_entropy</link>&#32;();
<anchor xml:id="_crypt-utils_8c_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(entropy&#32;&lt;&#32;128)
<anchor xml:id="_crypt-utils_8c_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stderr,&#32;<emphasis role="stringliteral">&quot;WARN:&#32;not&#32;enough&#32;entropy,&#32;creating&#32;some...\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_crypt-utils_8c_1a53b5762e00daafcc3644c03e2fd9b2c4">add_entropy</link>&#32;();
<anchor xml:id="_crypt-utils_8c_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00246"/>00246 
<anchor xml:id="_crypt-utils_8c_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RAND_bytes&#32;(destination,&#32;32)&#32;!=&#32;1)
<anchor xml:id="_crypt-utils_8c_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stderr,&#32;<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;generate&#32;key\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destination&#32;=&#32;NULL;
<anchor xml:id="_crypt-utils_8c_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00252"/>00252 
<anchor xml:id="_crypt-utils_8c_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strlen&#32;((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)destination)&#32;==&#32;32)
<anchor xml:id="_crypt-utils_8c_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00255"/>00255 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00256"/>00256 
<anchor xml:id="_crypt-utils_8c_source_1l00257"/>00257 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97">is_valid_key</link>&#32;(destination)&#32;==&#32;0)
<anchor xml:id="_crypt-utils_8c_source_1l00258"/>00258 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stderr,&#32;<emphasis role="stringliteral">&quot;Err:&#32;Generated&#32;key&#32;is&#32;inval1d\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tcfs__utils_8c_1a8c1c24299a2b01f6157b051cb56ebc52">print_aes_key</link>&#32;(destination);
<anchor xml:id="_crypt-utils_8c_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;destination&#32;=&#32;NULL;
<anchor xml:id="_crypt-utils_8c_source_1l00262"/>00262 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00263"/>00263 }
<anchor xml:id="_crypt-utils_8c_source_1l00264"/>00264 
<anchor xml:id="_crypt-utils_8c_source_1l00274"/>00274 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*
<anchor xml:id="_crypt-utils_8c_source_1l00275"/><link linkend="_crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6">00275</link> <link linkend="_crypt-utils_8c_1aa926098a8843cf0ab6bd7eb8b3bbd2e6">encrypt_string</link>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*plaintext,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*key,
<anchor xml:id="_crypt-utils_8c_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*encrypted_key_len)
<anchor xml:id="_crypt-utils_8c_source_1l00277"/>00277 {
<anchor xml:id="_crypt-utils_8c_source_1l00278"/>00278 &#32;&#32;EVP_CIPHER_CTX&#32;*ctx;
<anchor xml:id="_crypt-utils_8c_source_1l00279"/>00279 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;EVP_CIPHER&#32;*cipher&#32;=&#32;EVP_aes_256_cbc&#32;();
<anchor xml:id="_crypt-utils_8c_source_1l00280"/>00280 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;iv[AES_BLOCK_SIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00281"/>00281 &#32;&#32;memset&#32;(iv,&#32;0,&#32;AES_BLOCK_SIZE);
<anchor xml:id="_crypt-utils_8c_source_1l00282"/>00282 
<anchor xml:id="_crypt-utils_8c_source_1l00283"/>00283 &#32;&#32;ctx&#32;=&#32;EVP_CIPHER_CTX_new&#32;();
<anchor xml:id="_crypt-utils_8c_source_1l00284"/>00284 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ctx)
<anchor xml:id="_crypt-utils_8c_source_1l00285"/>00285 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_crypt-utils_8c_source_1l00287"/>00287 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00288"/>00288 
<anchor xml:id="_crypt-utils_8c_source_1l00289"/>00289 &#32;&#32;EVP_EncryptInit_ex&#32;(ctx,&#32;cipher,&#32;NULL,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)key,&#32;iv);
<anchor xml:id="_crypt-utils_8c_source_1l00290"/>00290 
<anchor xml:id="_crypt-utils_8c_source_1l00291"/>00291 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;plaintext_len&#32;=&#32;strlen&#32;((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)plaintext);
<anchor xml:id="_crypt-utils_8c_source_1l00292"/>00292 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ciphertext[plaintext_len&#32;+&#32;AES_BLOCK_SIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00293"/>00293 &#32;&#32;memset&#32;(ciphertext,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(ciphertext));
<anchor xml:id="_crypt-utils_8c_source_1l00294"/>00294 
<anchor xml:id="_crypt-utils_8c_source_1l00295"/>00295 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;len;
<anchor xml:id="_crypt-utils_8c_source_1l00296"/>00296 &#32;&#32;EVP_EncryptUpdate&#32;(ctx,&#32;ciphertext,&#32;&amp;len,&#32;plaintext,&#32;plaintext_len);
<anchor xml:id="_crypt-utils_8c_source_1l00297"/>00297 &#32;&#32;EVP_EncryptFinal_ex&#32;(ctx,&#32;ciphertext&#32;+&#32;len,&#32;&amp;len);
<anchor xml:id="_crypt-utils_8c_source_1l00298"/>00298 &#32;&#32;EVP_CIPHER_CTX_free&#32;(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00299"/>00299 
<anchor xml:id="_crypt-utils_8c_source_1l00300"/>00300 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*encoded_string&#32;=&#32;malloc&#32;(len&#32;*&#32;2&#32;+&#32;1);
<anchor xml:id="_crypt-utils_8c_source_1l00301"/>00301 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!encoded_string)
<anchor xml:id="_crypt-utils_8c_source_1l00302"/>00302 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_crypt-utils_8c_source_1l00304"/>00304 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00305"/>00305 
<anchor xml:id="_crypt-utils_8c_source_1l00306"/>00306 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;len;&#32;i++)
<anchor xml:id="_crypt-utils_8c_source_1l00307"/>00307 &#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;sprintf&#32;((<emphasis role="keywordtype">char</emphasis>&#32;*)&amp;encoded_string[i&#32;*&#32;2],&#32;<emphasis role="stringliteral">&quot;%02x&quot;</emphasis>,&#32;ciphertext[i]);
<anchor xml:id="_crypt-utils_8c_source_1l00309"/>00309 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00310"/>00310 &#32;&#32;encoded_string[len&#32;*&#32;2]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00311"/>00311 
<anchor xml:id="_crypt-utils_8c_source_1l00312"/>00312 &#32;&#32;*encrypted_key_len&#32;=&#32;len&#32;*&#32;2;
<anchor xml:id="_crypt-utils_8c_source_1l00313"/>00313 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;encoded_string;
<anchor xml:id="_crypt-utils_8c_source_1l00314"/>00314 }
<anchor xml:id="_crypt-utils_8c_source_1l00315"/>00315 
<anchor xml:id="_crypt-utils_8c_source_1l00324"/>00324 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*
<anchor xml:id="_crypt-utils_8c_source_1l00325"/><link linkend="_crypt-utils_8c_1a22f528907ee4f078e333501b747d5435">00325</link> <link linkend="_crypt-utils_8c_1a22f528907ee4f078e333501b747d5435">decrypt_string</link>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ciphertext,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*key)
<anchor xml:id="_crypt-utils_8c_source_1l00326"/>00326 {
<anchor xml:id="_crypt-utils_8c_source_1l00327"/>00327 &#32;&#32;EVP_CIPHER_CTX&#32;*ctx;
<anchor xml:id="_crypt-utils_8c_source_1l00328"/>00328 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;EVP_CIPHER&#32;*cipher
<anchor xml:id="_crypt-utils_8c_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;EVP_aes_256_cbc&#32;();&#32;<emphasis role="comment">//&#32;Choose&#32;the&#32;correct&#32;algorithm</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00330"/>00330 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;iv[AES_BLOCK_SIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00331"/>00331 &#32;&#32;memset&#32;(iv,&#32;0,&#32;AES_BLOCK_SIZE);
<anchor xml:id="_crypt-utils_8c_source_1l00332"/>00332 
<anchor xml:id="_crypt-utils_8c_source_1l00333"/>00333 &#32;&#32;ctx&#32;=&#32;EVP_CIPHER_CTX_new&#32;();
<anchor xml:id="_crypt-utils_8c_source_1l00334"/>00334 &#32;&#32;EVP_DecryptInit_ex&#32;(ctx,&#32;cipher,&#32;NULL,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)key,&#32;iv);
<anchor xml:id="_crypt-utils_8c_source_1l00335"/>00335 
<anchor xml:id="_crypt-utils_8c_source_1l00336"/>00336 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;decoded_len&#32;=&#32;strlen&#32;((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)ciphertext);
<anchor xml:id="_crypt-utils_8c_source_1l00337"/>00337 
<anchor xml:id="_crypt-utils_8c_source_1l00338"/>00338 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;plaintext[decoded_len];
<anchor xml:id="_crypt-utils_8c_source_1l00339"/>00339 &#32;&#32;memset&#32;(plaintext,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(plaintext));
<anchor xml:id="_crypt-utils_8c_source_1l00340"/>00340 
<anchor xml:id="_crypt-utils_8c_source_1l00341"/>00341 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;len;
<anchor xml:id="_crypt-utils_8c_source_1l00342"/>00342 &#32;&#32;EVP_DecryptUpdate&#32;(ctx,&#32;plaintext,&#32;&amp;len,&#32;ciphertext,&#32;(<emphasis role="keywordtype">int</emphasis>)decoded_len);
<anchor xml:id="_crypt-utils_8c_source_1l00343"/>00343 &#32;&#32;EVP_DecryptFinal_ex&#32;(ctx,&#32;plaintext&#32;+&#32;len,&#32;&amp;len);
<anchor xml:id="_crypt-utils_8c_source_1l00344"/>00344 &#32;&#32;EVP_CIPHER_CTX_free&#32;(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00345"/>00345 
<anchor xml:id="_crypt-utils_8c_source_1l00346"/>00346 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*decrypted_string&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)malloc&#32;(decoded_len&#32;+&#32;1);
<anchor xml:id="_crypt-utils_8c_source_1l00347"/>00347 &#32;&#32;memcpy&#32;(decrypted_string,&#32;plaintext,&#32;decoded_len);
<anchor xml:id="_crypt-utils_8c_source_1l00348"/>00348 &#32;&#32;decrypted_string[decoded_len]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00349"/>00349 
<anchor xml:id="_crypt-utils_8c_source_1l00350"/>00350 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;decrypted_string;
<anchor xml:id="_crypt-utils_8c_source_1l00351"/>00351 }
<anchor xml:id="_crypt-utils_8c_source_1l00352"/>00352 
<anchor xml:id="_crypt-utils_8c_source_1l00359"/>00359 <emphasis role="keywordtype">int</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00360"/><link linkend="_crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97">00360</link> <link linkend="_crypt-utils_8c_1a36c2342a7c47b8f41bf628bf473b1c97">is_valid_key</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*key)
<anchor xml:id="_crypt-utils_8c_source_1l00361"/>00361 {
<anchor xml:id="_crypt-utils_8c_source_1l00362"/>00362 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;str[33];
<anchor xml:id="_crypt-utils_8c_source_1l00363"/>00363 &#32;&#32;memcpy&#32;(str,&#32;key,&#32;32);
<anchor xml:id="_crypt-utils_8c_source_1l00364"/>00364 &#32;&#32;str[32]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00365"/>00365 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;key_length&#32;=&#32;strlen&#32;(str);
<anchor xml:id="_crypt-utils_8c_source_1l00366"/>00366 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key_length&#32;!=&#32;32&#32;?&#32;0&#32;:&#32;1;
<anchor xml:id="_crypt-utils_8c_source_1l00367"/>00367 }
<anchor xml:id="_crypt-utils_8c_source_1l00368"/>00368 
<anchor xml:id="_crypt-utils_8c_source_1l00369"/>00369 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00370"/>00370 <emphasis role="comment">int&#32;rebuild_key(char&#32;*key,&#32;char&#32;*cert,&#32;char&#32;*dest){</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00371"/>00371 <emphasis role="comment">&#32;&#32;&#32;&#32;return&#32;-1;</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00372"/>00372 <emphasis role="comment">}*/</emphasis>
</programlisting></section>
