<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_crypt-utils_8c_source" xml:lang="en-US">
<title>crypt-utils.c</title>
<indexterm><primary>userspace-module/utils/crypt-utils/crypt-utils.c</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="_crypt-utils_8c_source_1l00001"/>00001 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;High&#32;level&#32;function&#32;interface&#32;for&#32;performing&#32;AES&#32;encryption&#32;on&#32;FILE&#32;pointers</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00003"/>00003 <emphasis role="comment">&#32;*&#32;Uses&#32;OpenSSL&#32;libcrypto&#32;EVP&#32;API</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00004"/>00004 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00005"/>00005 <emphasis role="comment">&#32;*&#32;By&#32;Andy&#32;Sayler&#32;(www.andysayler.com)</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00006"/>00006 <emphasis role="comment">&#32;*&#32;Created&#32;&#32;04/17/12</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00007"/>00007 <emphasis role="comment">&#32;*&#32;Modified&#32;18/10/23&#32;by&#32;[Carlo&#32;Alberto&#32;Giordano]</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00008"/>00008 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00009"/>00009 <emphasis role="comment">&#32;*&#32;Derived&#32;from&#32;OpenSSL.org&#32;EVP_Encrypt_*&#32;Manpage&#32;Examples</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00010"/>00010 <emphasis role="comment">&#32;*&#32;http://www.openssl.org/docs/crypto/EVP_EncryptInit.html#EXAMPLES</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00011"/>00011 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00012"/>00012 <emphasis role="comment">&#32;*&#32;With&#32;additional&#32;information&#32;from&#32;Saju&#32;Pillai&apos;s&#32;OpenSSL&#32;AES&#32;Example</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00013"/>00013 <emphasis role="comment">&#32;*&#32;http://saju.net.in/blog/?p=36</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00014"/>00014 <emphasis role="comment">&#32;*&#32;http://saju.net.in/code/misc/openssl_aes.c.txt</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00015"/>00015 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00016"/>00016 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&quot;crypt-utils.h&quot;</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00018"/>00018 
<anchor xml:id="_crypt-utils_8c_source_1l00019"/>00019 <emphasis role="preprocessor">#define&#32;BLOCKSIZE&#32;1024</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00020"/>00020 <emphasis role="preprocessor">#define&#32;IV_SIZE&#32;32</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00021"/>00021 <emphasis role="preprocessor">#define&#32;KEY_SIZE&#32;32</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00022"/>00022 
<anchor xml:id="_crypt-utils_8c_source_1l00023"/>00023 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;do_crypt(FILE*&#32;in,&#32;FILE*&#32;out,&#32;<emphasis role="keywordtype">int</emphasis>&#32;action,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*key_str){
<anchor xml:id="_crypt-utils_8c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Local&#32;Vars&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00025"/>00025 
<anchor xml:id="_crypt-utils_8c_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Buffers&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;inbuf[BLOCKSIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;inlen;
<anchor xml:id="_crypt-utils_8c_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Allow&#32;enough&#32;space&#32;in&#32;output&#32;buffer&#32;for&#32;additional&#32;cipher&#32;block&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;outbuf[BLOCKSIZE&#32;+&#32;EVP_MAX_BLOCK_LENGTH];
<anchor xml:id="_crypt-utils_8c_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;outlen;
<anchor xml:id="_crypt-utils_8c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;writelen;
<anchor xml:id="_crypt-utils_8c_source_1l00033"/>00033 
<anchor xml:id="_crypt-utils_8c_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;OpenSSL&#32;libcrypto&#32;vars&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00035"/>00035 &#32;&#32;&#32;&#32;EVP_CIPHER_CTX&#32;*ctx;
<anchor xml:id="_crypt-utils_8c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;ctx&#32;=&#32;EVP_CIPHER_CTX_new();
<anchor xml:id="_crypt-utils_8c_source_1l00037"/>00037 
<anchor xml:id="_crypt-utils_8c_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;key[KEY_SIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;iv[IV_SIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nrounds&#32;=&#32;5;
<anchor xml:id="_crypt-utils_8c_source_1l00041"/>00041 
<anchor xml:id="_crypt-utils_8c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;tmp&#32;vars&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
<anchor xml:id="_crypt-utils_8c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Setup&#32;Encryption&#32;Key&#32;and&#32;Cipher&#32;Engine&#32;if&#32;in&#32;cipher&#32;mode&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(action&#32;&gt;=&#32;0){
<anchor xml:id="_crypt-utils_8c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!key_str){
<anchor xml:id="_crypt-utils_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Key_str&#32;must&#32;not&#32;be&#32;NULL\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Build&#32;Key&#32;from&#32;String&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;EVP_BytesToKey(EVP_aes_256_cbc(),&#32;EVP_sha1(),&#32;NULL,
<anchor xml:id="_crypt-utils_8c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_str,&#32;(<emphasis role="keywordtype">int</emphasis>)strlen((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)key_str),&#32;nrounds,&#32;key,&#32;iv);
<anchor xml:id="_crypt-utils_8c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;32)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Key&#32;size&#32;is&#32;%d&#32;bits&#32;-&#32;should&#32;be&#32;256&#32;bits\n&quot;</emphasis>,&#32;i*8);
<anchor xml:id="_crypt-utils_8c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Init&#32;Engine&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_init(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CipherInit_ex(ctx,&#32;EVP_aes_256_cbc(),&#32;NULL,&#32;key,&#32;iv,&#32;action);
<anchor xml:id="_crypt-utils_8c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00063"/>00063 
<anchor xml:id="_crypt-utils_8c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Loop&#32;through&#32;Input&#32;File*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;;){
<anchor xml:id="_crypt-utils_8c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;Block&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inlen&#32;=&#32;fread(inbuf,&#32;<emphasis role="keyword">sizeof</emphasis>(*inbuf),&#32;BLOCKSIZE,&#32;in);
<anchor xml:id="_crypt-utils_8c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(inlen&#32;&lt;=&#32;0){
<anchor xml:id="_crypt-utils_8c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;EOF&#32;-&gt;&#32;Break&#32;Loop&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00072"/>00072 
<anchor xml:id="_crypt-utils_8c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;If&#32;in&#32;cipher&#32;mode,&#32;perform&#32;cipher&#32;transform&#32;on&#32;block&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(action&#32;&gt;=&#32;0){
<anchor xml:id="_crypt-utils_8c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!EVP_CipherUpdate(ctx,&#32;outbuf,&#32;&amp;outlen,&#32;inbuf,&#32;inlen))
<anchor xml:id="_crypt-utils_8c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_cleanup(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;If&#32;in&#32;pass-through&#32;mode.&#32;copy&#32;block&#32;as&#32;is&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_crypt-utils_8c_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(outbuf,&#32;inbuf,&#32;inlen);
<anchor xml:id="_crypt-utils_8c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlen&#32;=&#32;inlen;
<anchor xml:id="_crypt-utils_8c_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00087"/>00087 
<anchor xml:id="_crypt-utils_8c_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Write&#32;Block&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writelen&#32;=&#32;fwrite(outbuf,&#32;<emphasis role="keyword">sizeof</emphasis>(*outbuf),&#32;outlen,&#32;out);
<anchor xml:id="_crypt-utils_8c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(writelen&#32;!=&#32;outlen){
<anchor xml:id="_crypt-utils_8c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perror(<emphasis role="stringliteral">&quot;fwrite&#32;error&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_cleanup(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00097"/>00097 
<anchor xml:id="_crypt-utils_8c_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;If&#32;in&#32;cipher&#32;mode,&#32;handle&#32;necessary&#32;padding&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(action&#32;&gt;=&#32;0){
<anchor xml:id="_crypt-utils_8c_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Handle&#32;remaining&#32;cipher&#32;block&#32;+&#32;padding&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!EVP_CipherFinal_ex(ctx,&#32;outbuf,&#32;&amp;outlen))
<anchor xml:id="_crypt-utils_8c_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Error&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_cleanup(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_crypt-utils_8c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Write&#32;remainign&#32;cipher&#32;block&#32;+&#32;padding*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fwrite(outbuf,&#32;<emphasis role="keyword">sizeof</emphasis>(*inbuf),&#32;outlen,&#32;out);
<anchor xml:id="_crypt-utils_8c_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EVP_CIPHER_CTX_cleanup(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00111"/>00111 
<anchor xml:id="_crypt-utils_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Success&#32;*/</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_crypt-utils_8c_source_1l00114"/>00114 }
<anchor xml:id="_crypt-utils_8c_source_1l00115"/>00115 
<anchor xml:id="_crypt-utils_8c_source_1l00116"/>00116 <emphasis role="comment">//&#32;Verify&#32;the&#32;entropy</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00117"/>00117 <emphasis role="keywordtype">int</emphasis>&#32;check_entropy(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;FILE&#32;*entropy_file&#32;=&#32;fopen(<emphasis role="stringliteral">&quot;/proc/sys/kernel/random/entropy_avail&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(entropy_file&#32;==&#32;NULL)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perror(<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;open&#32;entropy&#32;file&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_crypt-utils_8c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00123"/>00123 
<anchor xml:id="_crypt-utils_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;entropy_value;
<anchor xml:id="_crypt-utils_8c_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fscanf(entropy_file,&#32;<emphasis role="stringliteral">&quot;%d&quot;</emphasis>,&#32;&amp;entropy_value)&#32;!=&#32;1)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perror(<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;estimate&#32;entropy&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fclose(entropy_file);
<anchor xml:id="_crypt-utils_8c_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_crypt-utils_8c_source_1l00129"/>00129 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00130"/>00130 
<anchor xml:id="_crypt-utils_8c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;fclose(entropy_file);
<anchor xml:id="_crypt-utils_8c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;entropy_value;
<anchor xml:id="_crypt-utils_8c_source_1l00133"/>00133 }
<anchor xml:id="_crypt-utils_8c_source_1l00134"/>00134 
<anchor xml:id="_crypt-utils_8c_source_1l00135"/>00135 <emphasis role="comment">//Add&#32;new&#32;entropy</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00136"/>00136 <emphasis role="keywordtype">void</emphasis>&#32;add_entropy(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;FILE&#32;*urandom&#32;=&#32;fopen(<emphasis role="stringliteral">&quot;/dev/urandom&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;rb&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(urandom&#32;==&#32;NULL)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perror(<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;open&#32;/dev/urandom&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(EXIT_FAILURE);
<anchor xml:id="_crypt-utils_8c_source_1l00141"/>00141 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00142"/>00142 
<anchor xml:id="_crypt-utils_8c_source_1l00143"/>00143 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;random_data[32];
<anchor xml:id="_crypt-utils_8c_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread(random_data,&#32;1,&#32;<emphasis role="keyword">sizeof</emphasis>(random_data),&#32;urandom);
<anchor xml:id="_crypt-utils_8c_source_1l00145"/>00145 &#32;&#32;&#32;&#32;fclose(urandom);
<anchor xml:id="_crypt-utils_8c_source_1l00146"/>00146 
<anchor xml:id="_crypt-utils_8c_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>(random_data))&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;read&#32;data\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(EXIT_FAILURE);
<anchor xml:id="_crypt-utils_8c_source_1l00150"/>00150 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00151"/>00151 
<anchor xml:id="_crypt-utils_8c_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Usa&#32;i&#32;dati&#32;casuali&#32;per&#32;aggiungere&#32;entropia</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;RAND_add(random_data,&#32;<emphasis role="keyword">sizeof</emphasis>(random_data),&#32;0.5);&#32;<emphasis role="comment">//&#32;0.5&#32;è&#32;un&#32;peso&#32;arbitrario</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00154"/>00154 
<anchor xml:id="_crypt-utils_8c_source_1l00155"/>00155 &#32;&#32;&#32;&#32;fprintf(stdout,&#32;<emphasis role="stringliteral">&quot;Entropy&#32;added&#32;successfully!\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00156"/>00156 }
<anchor xml:id="_crypt-utils_8c_source_1l00157"/>00157 
<anchor xml:id="_crypt-utils_8c_source_1l00158"/>00158 
<anchor xml:id="_crypt-utils_8c_source_1l00159"/>00159 <emphasis role="keywordtype">void</emphasis>&#32;generate_key(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*destination)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00160"/>00160 &#32;&#32;&#32;&#32;fprintf(stdout,&#32;<emphasis role="stringliteral">&quot;Generating&#32;a&#32;new&#32;key...\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00161"/>00161 
<anchor xml:id="_crypt-utils_8c_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="comment">//Why?&#32;Because&#32;if&#32;we&#32;try&#32;to&#32;create&#32;a&#32;large&#32;number&#32;of&#32;files&#32;there&#32;might&#32;not&#32;be&#32;enough&#32;random&#32;bytes&#32;in&#32;the&#32;system&#32;to&#32;generate&#32;a&#32;key</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;10;&#32;i++)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;entropy&#32;=&#32;check_entropy();
<anchor xml:id="_crypt-utils_8c_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(entropy&#32;&lt;&#32;128)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;WARN:&#32;not&#32;enough&#32;entropy,&#32;creating&#32;some...\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_entropy();
<anchor xml:id="_crypt-utils_8c_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00169"/>00169 
<anchor xml:id="_crypt-utils_8c_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RAND_bytes(destination,&#32;32)&#32;!=&#32;1)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Err:&#32;Cannot&#32;generate&#32;key\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destination&#32;=&#32;NULL;
<anchor xml:id="_crypt-utils_8c_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00174"/>00174 
<anchor xml:id="_crypt-utils_8c_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strlen((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)destination)&#32;==&#32;32)
<anchor xml:id="_crypt-utils_8c_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00177"/>00177 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00178"/>00178 
<anchor xml:id="_crypt-utils_8c_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_valid_key(destination)&#32;==&#32;0)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Err:&#32;Generated&#32;key&#32;is&#32;inval1d\n&quot;</emphasis>);
<anchor xml:id="_crypt-utils_8c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_aes_key(destination);
<anchor xml:id="_crypt-utils_8c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destination&#32;=&#32;NULL;
<anchor xml:id="_crypt-utils_8c_source_1l00183"/>00183 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00184"/>00184 }
<anchor xml:id="_crypt-utils_8c_source_1l00185"/>00185 
<anchor xml:id="_crypt-utils_8c_source_1l00186"/>00186 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;encrypt_string(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;plaintext,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;key,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*encrypted_key_len)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00187"/>00187 &#32;&#32;&#32;&#32;EVP_CIPHER_CTX*&#32;ctx;
<anchor xml:id="_crypt-utils_8c_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;EVP_CIPHER*&#32;cipher&#32;=&#32;EVP_aes_256_cbc();
<anchor xml:id="_crypt-utils_8c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;iv[AES_BLOCK_SIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00190"/>00190 &#32;&#32;&#32;&#32;memset(iv,&#32;0,&#32;AES_BLOCK_SIZE);
<anchor xml:id="_crypt-utils_8c_source_1l00191"/>00191 
<anchor xml:id="_crypt-utils_8c_source_1l00192"/>00192 &#32;&#32;&#32;&#32;ctx&#32;=&#32;EVP_CIPHER_CTX_new();
<anchor xml:id="_crypt-utils_8c_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ctx)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_crypt-utils_8c_source_1l00195"/>00195 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00196"/>00196 
<anchor xml:id="_crypt-utils_8c_source_1l00197"/>00197 &#32;&#32;&#32;&#32;EVP_EncryptInit_ex(ctx,&#32;cipher,&#32;NULL,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)key,&#32;iv);
<anchor xml:id="_crypt-utils_8c_source_1l00198"/>00198 
<anchor xml:id="_crypt-utils_8c_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;plaintext_len&#32;=&#32;strlen((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)plaintext);
<anchor xml:id="_crypt-utils_8c_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ciphertext[plaintext_len&#32;+&#32;AES_BLOCK_SIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00201"/>00201 &#32;&#32;&#32;&#32;memset(ciphertext,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(ciphertext));
<anchor xml:id="_crypt-utils_8c_source_1l00202"/>00202 
<anchor xml:id="_crypt-utils_8c_source_1l00203"/>00203 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;len;
<anchor xml:id="_crypt-utils_8c_source_1l00204"/>00204 &#32;&#32;&#32;&#32;EVP_EncryptUpdate(ctx,&#32;ciphertext,&#32;&amp;len,&#32;plaintext,&#32;plaintext_len);
<anchor xml:id="_crypt-utils_8c_source_1l00205"/>00205 &#32;&#32;&#32;&#32;EVP_EncryptFinal_ex(ctx,&#32;ciphertext&#32;+&#32;len,&#32;&amp;len);
<anchor xml:id="_crypt-utils_8c_source_1l00206"/>00206 &#32;&#32;&#32;&#32;EVP_CIPHER_CTX_free(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00207"/>00207 
<anchor xml:id="_crypt-utils_8c_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;encoded_string&#32;=&#32;malloc(len&#32;*&#32;2&#32;+&#32;1);
<anchor xml:id="_crypt-utils_8c_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!encoded_string)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_crypt-utils_8c_source_1l00211"/>00211 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00212"/>00212 
<anchor xml:id="_crypt-utils_8c_source_1l00213"/>00213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;len;&#32;i++)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprintf((<emphasis role="keywordtype">char</emphasis>*)&amp;encoded_string[i&#32;*&#32;2],&#32;<emphasis role="stringliteral">&quot;%02x&quot;</emphasis>,&#32;ciphertext[i]);
<anchor xml:id="_crypt-utils_8c_source_1l00215"/>00215 &#32;&#32;&#32;&#32;}
<anchor xml:id="_crypt-utils_8c_source_1l00216"/>00216 &#32;&#32;&#32;&#32;encoded_string[len&#32;*&#32;2]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00217"/>00217 
<anchor xml:id="_crypt-utils_8c_source_1l00218"/>00218 &#32;&#32;&#32;&#32;*encrypted_key_len&#32;=&#32;len&#32;*&#32;2;
<anchor xml:id="_crypt-utils_8c_source_1l00219"/>00219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;encoded_string;
<anchor xml:id="_crypt-utils_8c_source_1l00220"/>00220 }
<anchor xml:id="_crypt-utils_8c_source_1l00221"/>00221 
<anchor xml:id="_crypt-utils_8c_source_1l00222"/>00222 
<anchor xml:id="_crypt-utils_8c_source_1l00223"/>00223 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;decrypt_string(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;ciphertext,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;key)&#32;{
<anchor xml:id="_crypt-utils_8c_source_1l00224"/>00224 &#32;&#32;&#32;&#32;EVP_CIPHER_CTX&#32;*ctx;
<anchor xml:id="_crypt-utils_8c_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;EVP_CIPHER&#32;*cipher&#32;=&#32;EVP_aes_256_cbc();&#32;<emphasis role="comment">//&#32;Choose&#32;the&#32;correct&#32;algorithm</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00226"/>00226 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;iv[AES_BLOCK_SIZE];
<anchor xml:id="_crypt-utils_8c_source_1l00227"/>00227 &#32;&#32;&#32;&#32;memset(iv,&#32;0,&#32;AES_BLOCK_SIZE);
<anchor xml:id="_crypt-utils_8c_source_1l00228"/>00228 
<anchor xml:id="_crypt-utils_8c_source_1l00229"/>00229 &#32;&#32;&#32;&#32;ctx&#32;=&#32;EVP_CIPHER_CTX_new();
<anchor xml:id="_crypt-utils_8c_source_1l00230"/>00230 &#32;&#32;&#32;&#32;EVP_DecryptInit_ex(ctx,&#32;cipher,&#32;NULL,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)key,&#32;iv);
<anchor xml:id="_crypt-utils_8c_source_1l00231"/>00231 
<anchor xml:id="_crypt-utils_8c_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;decoded_len&#32;=&#32;strlen((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)ciphertext);
<anchor xml:id="_crypt-utils_8c_source_1l00233"/>00233 
<anchor xml:id="_crypt-utils_8c_source_1l00234"/>00234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;plaintext[decoded_len];
<anchor xml:id="_crypt-utils_8c_source_1l00235"/>00235 &#32;&#32;&#32;&#32;memset(plaintext,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(plaintext));
<anchor xml:id="_crypt-utils_8c_source_1l00236"/>00236 
<anchor xml:id="_crypt-utils_8c_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;len;
<anchor xml:id="_crypt-utils_8c_source_1l00238"/>00238 &#32;&#32;&#32;&#32;EVP_DecryptUpdate(ctx,&#32;plaintext,&#32;&amp;len,&#32;ciphertext,&#32;(<emphasis role="keywordtype">int</emphasis>&#32;)decoded_len);
<anchor xml:id="_crypt-utils_8c_source_1l00239"/>00239 &#32;&#32;&#32;&#32;EVP_DecryptFinal_ex(ctx,&#32;plaintext&#32;+&#32;len,&#32;&amp;len);
<anchor xml:id="_crypt-utils_8c_source_1l00240"/>00240 &#32;&#32;&#32;&#32;EVP_CIPHER_CTX_free(ctx);
<anchor xml:id="_crypt-utils_8c_source_1l00241"/>00241 
<anchor xml:id="_crypt-utils_8c_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;decrypted_string&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)malloc(decoded_len&#32;+&#32;1);
<anchor xml:id="_crypt-utils_8c_source_1l00243"/>00243 &#32;&#32;&#32;&#32;memcpy(decrypted_string,&#32;plaintext,&#32;decoded_len);
<anchor xml:id="_crypt-utils_8c_source_1l00244"/>00244 &#32;&#32;&#32;&#32;decrypted_string[decoded_len]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00245"/>00245 
<anchor xml:id="_crypt-utils_8c_source_1l00246"/>00246 
<anchor xml:id="_crypt-utils_8c_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;decrypted_string;
<anchor xml:id="_crypt-utils_8c_source_1l00248"/>00248 }
<anchor xml:id="_crypt-utils_8c_source_1l00249"/>00249 
<anchor xml:id="_crypt-utils_8c_source_1l00250"/>00250 <emphasis role="keywordtype">int</emphasis>&#32;is_valid_key(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;key)
<anchor xml:id="_crypt-utils_8c_source_1l00251"/>00251 {
<anchor xml:id="_crypt-utils_8c_source_1l00252"/>00252 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;str[33];
<anchor xml:id="_crypt-utils_8c_source_1l00253"/>00253 &#32;&#32;&#32;&#32;memcpy(str,&#32;key,&#32;32);
<anchor xml:id="_crypt-utils_8c_source_1l00254"/>00254 &#32;&#32;&#32;&#32;str[32]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_crypt-utils_8c_source_1l00255"/>00255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;key_length&#32;=&#32;strlen(str);
<anchor xml:id="_crypt-utils_8c_source_1l00256"/>00256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key_length&#32;!=&#32;32&#32;?&#32;0:1;
<anchor xml:id="_crypt-utils_8c_source_1l00257"/>00257 }
<anchor xml:id="_crypt-utils_8c_source_1l00258"/>00258 
<anchor xml:id="_crypt-utils_8c_source_1l00259"/>00259 
<anchor xml:id="_crypt-utils_8c_source_1l00260"/>00260 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00261"/>00261 <emphasis role="comment">int&#32;rebuild_key(char&#32;*key,&#32;char&#32;*cert,&#32;char&#32;*dest){</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00262"/>00262 <emphasis role="comment">&#32;&#32;&#32;&#32;return&#32;-1;</emphasis>
<anchor xml:id="_crypt-utils_8c_source_1l00263"/>00263 <emphasis role="comment">}*/</emphasis>
</programlisting></section>
